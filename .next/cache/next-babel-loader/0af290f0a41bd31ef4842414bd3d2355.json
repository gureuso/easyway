{"ast":null,"code":"import { types } from 'mobx-state-tree';\nvar store = null;\nvar Store = types.model({\n  token: types.string,\n  isSignin: false\n}).actions(function (self) {\n  var signin = function signin(token) {\n    self.isSignin = true, self.token = token;\n  };\n\n  var signout = function signout() {\n    self.isSignin = false, self.token = '';\n  };\n\n  return {\n    signin: signin,\n    signout: signout\n  };\n});\nexport var initializeStore = function initializeStore() {\n  var snapshot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (store === null) {\n    store = Store.create({\n      isSignin: false,\n      token: ''\n    });\n  } // if(snapshot) {\n  //   applySnapshot(store, snapshot);\n  // }\n\n\n  return store;\n};","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/store/store.tsx"],"names":["types","store","Store","model","token","string","isSignin","actions","self","signin","signout","initializeStore","snapshot","create"],"mappings":"AAAA,SAA2DA,KAA3D,QAAwE,iBAAxE;AAEA,IAAIC,KAAa,GAAG,IAApB;AAEA,IAAMC,KAAK,GAAGF,KAAK,CAChBG,KADW,CACL;AACLC,EAAAA,KAAK,EAAEJ,KAAK,CAACK,MADR;AAELC,EAAAA,QAAQ,EAAE;AAFL,CADK,EAKXC,OALW,CAKH,UAAAC,IAAI,EAAI;AACf,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACL,KAAD,EAAmB;AAChCI,IAAAA,IAAI,CAACF,QAAL,GAAgB,IAAhB,EACAE,IAAI,CAACJ,KAAL,GAAaA,KADb;AAED,GAHD;;AAIA,MAAMM,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBF,IAAAA,IAAI,CAACF,QAAL,GAAgB,KAAhB,EACAE,IAAI,CAACJ,KAAL,GAAa,EADb;AAED,GAHD;;AAIA,SAAO;AAAEK,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,OAAO,EAAPA;AAAV,GAAP;AACD,CAfW,CAAd;AAqBA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAqB;AAAA,MAApBC,QAAoB,uEAAT,IAAS;;AAClD,MAAIX,KAAD,KAAmB,IAAtB,EAA4B;AAC1BA,IAAAA,KAAK,GAAGC,KAAK,CAACW,MAAN,CAAa;AAAEP,MAAAA,QAAQ,EAAE,KAAZ;AAAmBF,MAAAA,KAAK,EAAE;AAA1B,KAAb,CAAR;AACD,GAHiD,CAIlD;AACA;AACA;;;AACA,SAAOH,KAAP;AACD,CARM","sourcesContent":["import { applySnapshot, Instance, SnapshotIn, SnapshotOut, types } from 'mobx-state-tree';\n\nlet store: IStore = null as any;\n\nconst Store = types\n  .model({\n    token: types.string,\n    isSignin: false,\n  })\n  .actions(self => {\n    const signin = (token: string) => {\n      self.isSignin = true,\n      self.token = token\n    }\n    const signout = () => {\n      self.isSignin = false,\n      self.token = ''\n    }\n    return { signin, signout };\n  });\n\nexport type IStore = Instance<typeof Store>;\nexport type IStoreSnapshotIn = SnapshotIn<typeof Store>;\nexport type IStoreSnapshotOut = SnapshotOut<typeof Store>;\n\nexport const initializeStore = (snapshot = null) => {\n  if((store as any) === null) {\n    store = Store.create({ isSignin: false, token: '' });\n  }\n  // if(snapshot) {\n  //   applySnapshot(store, snapshot);\n  // }\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}