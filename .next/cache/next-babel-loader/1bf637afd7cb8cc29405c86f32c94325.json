{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/yjh/Documents/React/easyway/components/pages/list.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport moment from 'moment';\nimport $ from 'jquery';\nimport Modal from 'components/modal';\nimport { BusUI, BusAPI } from 'lib/bus';\nimport { WeatherAPI } from 'lib/weather';\nimport { SubwayUI, SubwayAPI } from 'lib/subway';\nimport { Interval } from 'lib/common';\n\nvar List =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(List, _React$Component);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"_ismounted\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentTime: '',\n      currentWeather: __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }),\n      buses: [],\n      subways: __jsx(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      })\n    });\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"setCurrentTime\",\n    value: function setCurrentTime() {\n      var _this2 = this;\n\n      var interval = new Interval();\n      interval.set(function () {\n        if (_this2._ismounted) {\n          _this2.setState({\n            currentTime: moment().format('HH:mm:ss')\n          });\n        }\n      }, 1000);\n    }\n  }, {\n    key: \"setCurrentWeather\",\n    value: function setCurrentWeather() {\n      var _this3 = this;\n\n      var weatherAPI = new WeatherAPI();\n      weatherAPI.getCurrentWeather().then(function (data) {\n        if (_this3._ismounted) {\n          _this3.setState({\n            currentWeather: __jsx(\"div\", {\n              id: \"current_weather\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 47\n              },\n              __self: this\n            }, __jsx(\"div\", {\n              id: \"current_weather_title\",\n              className: \"list\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 48\n              },\n              __self: this\n            }, __jsx(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 49\n              },\n              __self: this\n            }, __jsx(\"img\", {\n              src: data.icon,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 49\n              },\n              __self: this\n            })), __jsx(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50\n              },\n              __self: this\n            }, __jsx(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50\n              },\n              __self: this\n            }, data.temp, \"\\xB0\"))), __jsx(\"p\", {\n              id: \"current_weather_main\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 52\n              },\n              __self: this\n            }, data.main), __jsx(\"p\", {\n              id: \"current_weather_desc\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 53\n              },\n              __self: this\n            }, data.desc), __jsx(\"div\", {\n              id: \"current_weather_more\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 54\n              },\n              __self: this\n            }, __jsx(\"img\", {\n              src: \"/static/img/plus_btn_01.svg\",\n              onClick: Modal.active,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55\n              },\n              __self: this\n            })))\n          });\n        }\n      });\n    }\n  }, {\n    key: \"setCurrentBus\",\n    value: function setCurrentBus() {\n      var _this4 = this;\n\n      var api = new BusAPI();\n      api.getBuses(this.props.token).then(function (data) {\n        var arr = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(data), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var bus = _step.value;\n            var key = \"\".concat(bus.station_id).concat(bus.bus_route_id);\n            arr.push(__jsx(\"div\", {\n              className: \"current_bus\",\n              key: key,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 70\n              },\n              __self: this\n            }, __jsx(\"p\", {\n              className: \"current_bus_title\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 71\n              },\n              __self: this\n            }, bus.name), __jsx(\"p\", {\n              className: \"current_bus_message\",\n              id: key,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 72\n              },\n              __self: this\n            })));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        _this4.setState({\n          'buses': arr\n        });\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = _getIterator(data), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _bus = _step2.value;\n\n            var _key2 = \"\".concat(_bus.station_id).concat(_bus.bus_route_id);\n\n            var target = $(\"#\".concat(_key2));\n            BusUI.setCurrentBus(target, _bus.station_id, _bus.bus_route_id, _bus.ord);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"setCurrentSubway\",\n    value: function setCurrentSubway() {\n      var _this5 = this;\n\n      var subways = {};\n      var api = new SubwayAPI();\n      api.getSubways(this.props.token).then(function (data) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = _getIterator(data), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var subway = _step3.value;\n            subways[subway.station_name] = {};\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n              _iterator3[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = _getIterator(data), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var _subway = _step4.value;\n\n            if (subways[_subway.station_name][_subway.direction]) {\n              subways[_subway.station_name][_subway.direction].push(_subway.train_line_name);\n            } else {\n              subways[_subway.station_name][_subway.direction] = [_subway.train_line_name];\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n              _iterator4[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n\n        var arr = [];\n\n        for (var stationName in subways) {\n          for (var direction in subways[stationName]) {\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n              for (var _iterator5 = _getIterator(subways[stationName][direction]), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var trainLineName = _step5.value;\n                arr.push(__jsx(\"div\", {\n                  key: trainLineName,\n                  className: \"current_subway\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 110\n                  },\n                  __self: this\n                }, __jsx(\"div\", {\n                  className: \"current_subway_title\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 111\n                  },\n                  __self: this\n                }, trainLineName), __jsx(\"div\", {\n                  className: \"current_subway_message\",\n                  id: trainLineName.replace(/\\s/gi, \"\"),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 112\n                  },\n                  __self: this\n                })));\n              }\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n                  _iterator5[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n          }\n        }\n\n        if (arr.length > 0) {\n          _this5.setState({\n            'subways': __jsx(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 119\n              },\n              __self: this\n            }, arr)\n          });\n        }\n\n        for (var _stationName in subways) {\n          for (var _direction in subways[_stationName]) {\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n              for (var _iterator6 = _getIterator(subways[_stationName][_direction]), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var _trainLineName = _step6.value;\n                var target = $(\"#\".concat(_trainLineName.replace(/\\s/gi, \"\")));\n                SubwayUI.setCurrentSubway(target, _stationName, _trainLineName);\n              }\n            } catch (err) {\n              _didIteratorError6 = true;\n              _iteratorError6 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion6 && _iterator6[\"return\"] != null) {\n                  _iterator6[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError6) {\n                  throw _iteratorError6;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"setAll\",\n    value: function setAll() {\n      this.setCurrentTime();\n      this.setCurrentWeather();\n      this.setCurrentBus();\n      this.setCurrentSubway();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._ismounted = true;\n      this.setAll();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._ismounted = false;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.refresh == true) {\n        this.setAll();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"inner-content\",\n        id: \"list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        id: \"current_time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, this.state.currentTime)), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, this.state.currentWeather), this.state.buses, this.state.subways)));\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\nexport default List;","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/components/pages/list.tsx"],"names":["React","moment","$","Modal","BusUI","BusAPI","WeatherAPI","SubwayUI","SubwayAPI","Interval","List","currentTime","currentWeather","buses","subways","interval","set","_ismounted","setState","format","weatherAPI","getCurrentWeather","then","data","icon","temp","main","desc","active","api","getBuses","props","token","arr","bus","key","station_id","bus_route_id","push","name","target","setCurrentBus","ord","getSubways","subway","station_name","direction","train_line_name","stationName","trainLineName","replace","length","setCurrentSubway","setCurrentTime","setCurrentWeather","setAll","nextProps","refresh","state","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport $ from 'jquery';\n\nimport Modal from 'components/modal';\nimport { BusUI, BusAPI } from 'lib/bus';\nimport { WeatherAPI } from 'lib/weather';\nimport { SubwayUI, SubwayAPI } from 'lib/subway';\nimport { Interval } from 'lib/common';\n\ninterface ListProps {\n  refresh: boolean,\n  token: string\n}\n\ninterface ListStates {\n  currentTime: string,\n  currentWeather: JSX.Element,\n  buses: JSX.Element[],\n  subways: JSX.Element\n}\n\nclass List extends React.Component<ListProps, ListStates> {\n  _ismounted: boolean = true;\n\n  state = {\n    currentTime: '',\n    currentWeather: (<div></div>),\n    buses: [],\n    subways: (<span></span>)\n  };\n\n  setCurrentTime() {\n    const interval = new Interval();\n    interval.set(() => {\n      if(this._ismounted) {\n        this.setState({currentTime: moment().format('HH:mm:ss')});\n      }\n    }, 1000);\n  }\n\n  setCurrentWeather() {\n    const weatherAPI = new WeatherAPI();\n    weatherAPI.getCurrentWeather().then((data: any) => {\n      if(this._ismounted) {\n        this.setState({currentWeather: (\n          <div id=\"current_weather\">\n            <div id=\"current_weather_title\" className=\"list\">\n              <div><img src={data.icon}/></div>\n              <div><p>{data.temp}°</p></div>\n            </div>\n            <p id=\"current_weather_main\">{data.main}</p>\n            <p id=\"current_weather_desc\">{data.desc}</p>\n            <div id=\"current_weather_more\">\n              <img src=\"/static/img/plus_btn_01.svg\" onClick={Modal.active}/>\n            </div>\n          </div>\n        )});\n      }\n    });\n  }\n\n  setCurrentBus() {\n    const api = new BusAPI();\n    api.getBuses(this.props.token).then(data => {\n      let arr: JSX.Element[] = [];\n      for(let bus of data) {\n        const key = `${bus.station_id}${bus.bus_route_id}`;\n        arr.push(\n          <div className=\"current_bus\" key={key}>\n            <p className=\"current_bus_title\">{bus.name}</p>\n            <p className=\"current_bus_message\" id={key}></p>\n          </div>\n        )\n      }\n      this.setState({'buses': arr});\n      \n      for(let bus of data) {\n        const key = `${bus.station_id}${bus.bus_route_id}`;\n        const target = $(`#${key}`);\n        BusUI.setCurrentBus(target, bus.station_id, bus.bus_route_id, bus.ord);\n      }\n    });\n  }\n\n  setCurrentSubway() {\n    let subways: any = {};\n    const api = new SubwayAPI();\n    api.getSubways(this.props.token).then(data => {\n      for(let subway of data) {\n        subways[subway.station_name] = {}\n      }\n      for(let subway of data) {\n        if(subways[subway.station_name][subway.direction]) {\n          subways[subway.station_name][subway.direction].push(\n            subway.train_line_name\n          );\n        } else {\n          subways[subway.station_name][subway.direction] = [\n            subway.train_line_name\n          ];\n        }\n      }\n      \n      let arr: JSX.Element[] = []\n      for(let stationName in subways) {\n        for(let direction in subways[stationName]) {\n          for(let trainLineName of subways[stationName][direction]) {\n            arr.push(\n              <div key={trainLineName} className=\"current_subway\">\n                <div className=\"current_subway_title\">{trainLineName}</div>\n                <div className=\"current_subway_message\" id={trainLineName.replace(/\\s/gi, \"\")}></div>\n              </div>\n            )\n          }\n        }\n      }\n      if(arr.length > 0) {\n        this.setState({'subways': (<div>{arr}</div>)});\n      }\n\n      for(let stationName in subways) {\n        for(let direction in subways[stationName]) {\n          for(let trainLineName of subways[stationName][direction]) {\n            const target = $(`#${trainLineName.replace(/\\s/gi, \"\")}`);\n            SubwayUI.setCurrentSubway(target, stationName, trainLineName);\n          }\n        }\n      }\n    });\n  }\n\n  setAll() {\n    this.setCurrentTime();\n    this.setCurrentWeather();\n    this.setCurrentBus();\n    this.setCurrentSubway();\n  }\n\n  componentDidMount() {\n    this._ismounted = true;\n    this.setAll();\n  }\n  \n  componentWillUnmount() {\n     this._ismounted = false;\n  }\n\n  componentWillReceiveProps(nextProps: any) {\n    if(nextProps.refresh == true) {\n      this.setAll();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"inner-content\" id=\"list\">\n          <div className=\"list\">\n            <div>\n              <p id=\"current_time\">{this.state.currentTime}</p>\n            </div>\n\n            <div>{this.state.currentWeather}</div>\n\n            {this.state.buses}\n\n            {this.state.subways}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}