{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport xml from 'fast-xml-parser';\nimport config from 'config.json';\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\n\nclass BusUI {\n  static setWaitingTime(target, sec, stId, busRouteId, ord) {\n    const ui = new TimeUI();\n    ui.setWaitingTimeWithBus(target, sec, BusUI.setCurrentBus, stId, busRouteId, ord);\n  }\n\n  static setCurrentBus(target, stId, busRouteId, ord) {\n    const api = new BusAPI();\n    api.getDataByRoute(stId, busRouteId, ord).then(data => {\n      if (data) {\n        const bus = new Bus(data);\n        const waitingSec = bus.getWaitingSec();\n\n        if (waitingSec < 1) {\n          target.text(bus.message);\n        } else {\n          BusUI.setWaitingTime(target, waitingSec, stId, busRouteId, ord);\n        }\n      } else {\n        target.text('data is null');\n      }\n    });\n  }\n\n}\n\nclass BusAPI {\n  constructor() {\n    _defineProperty(this, \"API_KEY\", config.BUS_API_KEY);\n\n    _defineProperty(this, \"PROXY_HOST\", config.API_HOST);\n  }\n\n  proxy(url) {\n    return axios.get(this.PROXY_HOST + '/apis/proxy?url=' + encodeURIComponent(url)).then(response => {\n      const data = xml.parse(response.data.data.data).ServiceResult.msgBody;\n      return data ? data.itemList : undefined;\n    }).catch(error => {\n      console.log(error);\n      return undefined;\n    });\n  }\n\n  createBus(name, stationId, busRouteId, ord, token) {\n    const form = new FormData();\n    form.append('name', name);\n    form.append('station_id', stationId);\n    form.append('bus_route_id', busRouteId);\n    form.append('ord', ord);\n    form.append('token', token);\n    return axios.post(`${this.PROXY_HOST}/public_transport/buses/create`, form).then(response => {\n      return response.data.data;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteBus(id, token) {\n    return axios.delete(`${this.PROXY_HOST}/public_transport/buses/${id}/delete?token=${token}`).then(response => {\n      return response.data;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getBuses(token) {\n    return axios.get(`${this.PROXY_HOST}/public_transport/buses?token=${token}`).then(response => {\n      return response.data.data.buses;\n    }).catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getBusRoute(arsId) {\n    let url = 'http://ws.bus.go.kr/api/rest/stationinfo/getStationByUid?';\n    url += 'serviceKey=' + this.API_KEY;\n    url += '&arsId=' + arsId;\n    return this.proxy(url);\n  }\n\n  getBusStation(name) {\n    let url = 'http://ws.bus.go.kr/api/rest/stationinfo/getStationByName?';\n    url += 'serviceKey=' + this.API_KEY;\n    url += '&stSrch=' + name;\n    return this.proxy(url);\n  }\n\n  getDataByRoute(stId, busRouteId, ord) {\n    let url = 'http://ws.bus.go.kr/api/rest/arrive/getArrInfoByRoute?';\n    url += 'serviceKey=' + this.API_KEY;\n    url += '&stId=' + stId;\n    url += '&busRouteId=' + busRouteId;\n    url += '&ord=' + ord;\n    return this.proxy(url);\n  }\n\n}\n\nclass BusMessage {\n  constructor(message) {\n    _defineProperty(this, \"message\", void 0);\n\n    this.message = message;\n  }\n\n  getWaitingSec() {\n    const matchMinute = this.message.match(/\\d+분/g);\n    const minute = matchMinute ? parseInt(matchMinute[0].replace('분', '')) : 0;\n    const matchSec = this.message.match(/\\d+초/g);\n    const sec = matchSec ? parseInt(matchSec[0].replace('초', '')) : 0;\n    return minute * 60 + sec;\n  }\n\n  checkBusShutdown() {\n    if (this.message.search(/운행종료/g) != -1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n}\n\nclass Bus {\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"busNum\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    _defineProperty(this, \"apiCallTime\", void 0);\n\n    this.data = data;\n    this.busNum = parseInt(this.data.rtNm);\n    this.message = this.data.arrmsg1;\n    this.apiCallTime = this.data.mkTm;\n  }\n\n  getCorrectionSec() {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec() {\n    const bm = new BusMessage(this.message);\n    return bm.getWaitingSec() - this.getCorrectionSec();\n  }\n\n}\n\nexport { BusUI, BusAPI };","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/lib/bus.tsx"],"names":["axios","xml","config","Moment","TimeUI","BusUI","setWaitingTime","target","sec","stId","busRouteId","ord","ui","setWaitingTimeWithBus","setCurrentBus","api","BusAPI","getDataByRoute","then","data","bus","Bus","waitingSec","getWaitingSec","text","message","BUS_API_KEY","API_HOST","proxy","url","get","PROXY_HOST","encodeURIComponent","response","parse","ServiceResult","msgBody","itemList","undefined","catch","error","console","log","createBus","name","stationId","token","form","FormData","append","post","deleteBus","id","delete","getBuses","buses","getBusRoute","arsId","API_KEY","getBusStation","BusMessage","constructor","matchMinute","match","minute","parseInt","replace","matchSec","checkBusShutdown","search","busNum","rtNm","arrmsg1","apiCallTime","mkTm","getCorrectionSec","m","bm"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport xml from 'fast-xml-parser';\n\nimport config from 'config.json';\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\n\nclass BusUI {\n  static setWaitingTime(target: JQuery<HTMLElement>, sec: number, stId: number, busRouteId: number, ord: number) {\n    const ui = new TimeUI();\n    ui.setWaitingTimeWithBus(target, sec, BusUI.setCurrentBus, stId, busRouteId, ord);\n  }\n\n  static setCurrentBus(target: JQuery<HTMLElement>, stId: number, busRouteId: number, ord: number) {\n    const api = new BusAPI();\n    api.getDataByRoute(stId, busRouteId, ord).then(data => {\n      if(data) {\n        const bus = new Bus(data);\n        const waitingSec = bus.getWaitingSec();\n        if(waitingSec < 1) {\n          target.text(bus.message);\n        } else {\n          BusUI.setWaitingTime(target, waitingSec, stId, busRouteId, ord);\n        }\n      } else {\n        target.text('data is null');\n      }\n    });\n  }\n}\n\nclass BusAPI {\n  API_KEY: string = config.BUS_API_KEY;\n  PROXY_HOST: string = config.API_HOST;\n\n  proxy(url: string) {\n    return axios.get(this.PROXY_HOST + '/apis/proxy?url=' + encodeURIComponent(url))\n    .then(response => {\n      const data = xml.parse(response.data.data.data).ServiceResult.msgBody;\n      return data ? data.itemList : undefined;\n    })\n    .catch(error => {\n      console.log(error);\n      return undefined;\n    });\n  }\n\n  createBus(name: string, stationId: string, busRouteId: string, ord: string, token: string) {\n    const form = new FormData();\n    form.append('name', name);\n    form.append('station_id', stationId);\n    form.append('bus_route_id', busRouteId);\n    form.append('ord', ord);\n    form.append('token', token);\n\n    return axios.post(`${this.PROXY_HOST}/public_transport/buses/create`, form)\n    .then(response => {\n      return response.data.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteBus(id: number, token: string) {\n    return axios.delete(`${this.PROXY_HOST}/public_transport/buses/${id}/delete?token=${token}`)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getBuses(token: string) {\n    return axios.get(`${this.PROXY_HOST}/public_transport/buses?token=${token}`)\n    .then(response => {\n      return response.data.data.buses;\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getBusRoute(arsId: string) {\n    let url = 'http://ws.bus.go.kr/api/rest/stationinfo/getStationByUid?'\n    url += 'serviceKey=' + this.API_KEY;\n    url += '&arsId=' + arsId;\n\n    return this.proxy(url);\n  }\n\n  getBusStation(name: string) {\n    let url = 'http://ws.bus.go.kr/api/rest/stationinfo/getStationByName?'\n    url += 'serviceKey=' + this.API_KEY;\n    url += '&stSrch=' + name;\n\n    return this.proxy(url);\n  }\n\n  getDataByRoute(stId: number, busRouteId: number, ord: number) {\n    let url = 'http://ws.bus.go.kr/api/rest/arrive/getArrInfoByRoute?';\n    url += 'serviceKey=' + this.API_KEY;\n    url += '&stId=' + stId;\n    url += '&busRouteId=' + busRouteId;\n    url += '&ord=' + ord;\n\n    return this.proxy(url);\n  }\n}\n\nclass BusMessage {\n  message: string;\n\n  constructor(message: string) {\n    this.message = message;\n  }\n\n  getWaitingSec(): number {\n    const matchMinute = this.message.match(/\\d+분/g)!;\n    const minute = matchMinute ? parseInt(matchMinute[0].replace('분', '')) : 0;\n    const matchSec = this.message.match(/\\d+초/g)!;\n    const sec = matchSec ? parseInt(matchSec[0].replace('초', '')) : 0;\n    return minute * 60 + sec;\n  }\n\n  checkBusShutdown(): boolean {\n    if(this.message.search(/운행종료/g) != -1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nclass Bus {\n  data: {[key: string]: any};\n  busNum: number;\n  message: string;\n  apiCallTime: string;\n\n  constructor(data: {[key: string]: any}) {\n    this.data = data;\n    this.busNum = parseInt(this.data.rtNm);\n    this.message = this.data.arrmsg1;\n    this.apiCallTime = this.data.mkTm;\n  }\n\n  private getCorrectionSec(): number {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec(): number {\n    const bm = new BusMessage(this.message);\n    return bm.getWaitingSec() - this.getCorrectionSec();\n  }\n}\n\nexport { BusUI, BusAPI };\n"]},"metadata":{},"sourceType":"module"}