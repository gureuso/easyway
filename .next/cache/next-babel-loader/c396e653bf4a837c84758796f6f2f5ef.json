{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport $ from 'jquery';\nimport axios from 'axios';\nimport config from 'config.json';\nimport { Temperature } from './common';\n\nvar WeatherAPI =\n/*#__PURE__*/\nfunction () {\n  function WeatherAPI() {\n    _classCallCheck(this, WeatherAPI);\n\n    _defineProperty(this, \"API_KEY\", config.WEATHER_API_KEY);\n  }\n\n  _createClass(WeatherAPI, [{\n    key: \"getCurrentWeather\",\n    value: function getCurrentWeather() {\n      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Seoul';\n      return axios.get(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(location, \"&appid=\").concat(this.API_KEY)).then(function (response) {\n        var weather = new Weather(response.data);\n        return weather.getData();\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return {};\n      });\n    }\n  }, {\n    key: \"getHourlyWeather\",\n    value: function getHourlyWeather() {\n      return axios.get('http://api.openweathermap.org/data/2.5/forecast?q=Seoul&appid=' + this.API_KEY).then(function (response) {\n        var list = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(response.data.list), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var data = _step.value;\n            var weather = new Weather(data);\n            list.push(weather.getData());\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return list;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return [];\n      });\n    }\n  }]);\n\n  return WeatherAPI;\n}();\n\nvar Weather =\n/*#__PURE__*/\nfunction () {\n  function Weather(data) {\n    _classCallCheck(this, Weather);\n\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"weather\", void 0);\n\n    _defineProperty(this, \"main\", void 0);\n\n    this.data = data;\n    this.weather = this.data.weather;\n    this.main = this.data.main;\n  }\n\n  _createClass(Weather, [{\n    key: \"getWeather\",\n    value: function getWeather() {\n      var data = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(this.weather), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var w = _step2.value;\n          data.id = w.id;\n          data.icon = 'http://openweathermap.org/img/wn/' + w.icon + '@2x.png';\n          data.main = w.main;\n          data.desc = w.description;\n          break;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return data;\n    }\n  }, {\n    key: \"getTemp\",\n    value: function getTemp() {\n      var t = new Temperature();\n      var temp = t.kelvinToCelsius(this.main.temp);\n      var minTemp = t.kelvinToCelsius(this.main.temp_min);\n      var maxTemp = t.kelvinToCelsius(this.main.temp_max);\n      return {\n        temp: temp,\n        minTemp: minTemp,\n        maxTemp: maxTemp\n      };\n    }\n  }, {\n    key: \"getDateTime\",\n    value: function getDateTime() {\n      return this.data.dt * 1000;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var weather = this.getWeather();\n      var temp = this.getTemp();\n      var dt = this.getDateTime();\n      return $.extend(weather, temp, {\n        dt: dt\n      });\n    }\n  }]);\n\n  return Weather;\n}();\n\nexport { WeatherAPI };","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/lib/weather.tsx"],"names":["$","axios","config","Temperature","WeatherAPI","WEATHER_API_KEY","location","get","API_KEY","then","response","weather","Weather","data","getData","error","console","log","list","push","main","w","id","icon","desc","description","t","temp","kelvinToCelsius","minTemp","temp_min","maxTemp","temp_max","dt","getWeather","getTemp","getDateTime","extend"],"mappings":"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","sourcesContent":["import $ from 'jquery';\nimport axios from 'axios';\n\nimport config from 'config.json';\nimport { Temperature } from './common'\n\nclass WeatherAPI {\n  API_KEY: string = config.WEATHER_API_KEY;\n\n  getCurrentWeather(location: string='Seoul') {\n    return axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${this.API_KEY}`)\n    .then(response => {\n      const weather = new Weather(response.data);\n      return weather.getData();\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getHourlyWeather() {\n    return axios.get('http://api.openweathermap.org/data/2.5/forecast?q=Seoul&appid=' + this.API_KEY)\n    .then(response => {\n      let list: Array<Object> = [];\n      for(const data of response.data.list) {\n        const weather = new Weather(data);\n        list.push(weather.getData());\n      }\n      return list;\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n}\n\nclass Weather {\n  data: {[key: string]: any};\n  weather: Array<any>;\n  main: {[key: string]: any};\n\n  constructor(data: {[key: string]: any}) {\n    this.data = data;\n    this.weather = this.data.weather;\n    this.main = this.data.main;\n  }\n\n  private getWeather(): Object {\n    let data: any = {};\n    for(const w of this.weather) {\n      data.id = w.id;\n      data.icon = 'http://openweathermap.org/img/wn/' + w.icon + '@2x.png';\n      data.main = w.main;\n      data.desc = w.description;\n      break;\n    }\n    return data;\n  }\n\n  private getTemp(): Object {\n    const t = new Temperature();\n    const temp = t.kelvinToCelsius(this.main.temp);\n    const minTemp = t.kelvinToCelsius(this.main.temp_min);\n    const maxTemp = t.kelvinToCelsius(this.main.temp_max);\n    return {temp, minTemp, maxTemp};\n  }\n\n  private getDateTime(): number {\n    return this.data.dt * 1000;\n  }\n\n  getData(): Object {\n    const weather = this.getWeather();\n    const temp = this.getTemp();\n    const dt = this.getDateTime();\n    return $.extend(weather, temp, {dt});\n  }\n}\n\nexport { WeatherAPI };\n"]},"metadata":{},"sourceType":"module"}