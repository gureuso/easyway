{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport $ from 'jquery';\nimport axios from 'axios';\nimport config from 'config.json';\nimport { Temperature } from './common';\n\nclass WeatherAPI {\n  constructor() {\n    _defineProperty(this, \"API_KEY\", config.WEATHER_API_KEY);\n  }\n\n  getCurrentWeather(location = 'Seoul') {\n    return axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${this.API_KEY}`).then(response => {\n      const weather = new Weather(response.data);\n      return weather.getData();\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getHourlyWeather() {\n    return axios.get('http://api.openweathermap.org/data/2.5/forecast?q=Seoul&appid=' + this.API_KEY).then(response => {\n      let list = [];\n\n      for (const data of response.data.list) {\n        const weather = new Weather(data);\n        list.push(weather.getData());\n      }\n\n      return list;\n    }).catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n}\n\nclass Weather {\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"weather\", void 0);\n\n    _defineProperty(this, \"main\", void 0);\n\n    this.data = data;\n    this.weather = this.data.weather;\n    this.main = this.data.main;\n  }\n\n  getWeather() {\n    let data = {};\n\n    for (const w of this.weather) {\n      data.id = w.id;\n      data.icon = 'http://openweathermap.org/img/wn/' + w.icon + '@2x.png';\n      data.main = w.main;\n      data.desc = w.description;\n      break;\n    }\n\n    return data;\n  }\n\n  getTemp() {\n    const t = new Temperature();\n    const temp = t.kelvinToCelsius(this.main.temp);\n    const minTemp = t.kelvinToCelsius(this.main.temp_min);\n    const maxTemp = t.kelvinToCelsius(this.main.temp_max);\n    return {\n      temp,\n      minTemp,\n      maxTemp\n    };\n  }\n\n  getDateTime() {\n    return this.data.dt * 1000;\n  }\n\n  getData() {\n    const weather = this.getWeather();\n    const temp = this.getTemp();\n    const dt = this.getDateTime();\n    return $.extend(weather, temp, {\n      dt\n    });\n  }\n\n}\n\nexport { WeatherAPI };","map":null,"metadata":{},"sourceType":"module"}