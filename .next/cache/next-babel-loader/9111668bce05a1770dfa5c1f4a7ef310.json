{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport config from 'config.json';\n\nclass Random {\n  static all(len) {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    return this.random(characters, len);\n  }\n\n  static num(len) {\n    const characters = '0123456789';\n    return this.random(characters, len);\n  }\n\n  static str(len) {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n    return this.random(characters, len);\n  }\n\n  static random(characters, len) {\n    let result = '';\n    const charactersLength = characters.length;\n\n    for (let i = 0; i < len; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n\n}\n\nclass Temperature {\n  constructor() {\n    _defineProperty(this, \"KELVIN_NUM\", config.KELVIN_NUM);\n  }\n\n  kelvinToCelsius(temp) {\n    return parseFloat((temp - this.KELVIN_NUM).toFixed(0));\n  }\n\n}\n\nclass Moment {\n  getCorrectionSec(time) {\n    return Math.round((parseInt(moment().format('x')) - parseInt(moment(time).format('x'))) / 1000);\n  }\n\n}\n\nclass Interval {\n  set(callback, ms) {\n    const interval = setInterval(callback, ms);\n    Interval.ids.push(interval);\n    return interval;\n  }\n\n  clear(id) {\n    clearInterval(id);\n  }\n\n  static clearAll() {\n    for (const id of Interval.ids) {\n      clearInterval(id);\n    }\n  }\n\n}\n\n_defineProperty(Interval, \"ids\", []);\n\nexport { Interval, Moment, Temperature, Random };","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/lib/common.tsx"],"names":["moment","config","Random","all","len","characters","random","num","str","result","charactersLength","length","i","charAt","Math","floor","Temperature","KELVIN_NUM","kelvinToCelsius","temp","parseFloat","toFixed","Moment","getCorrectionSec","time","round","parseInt","format","Interval","set","callback","ms","interval","setInterval","ids","push","clear","id","clearInterval","clearAll"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,MAAN,CAAa;AACX,SAAOC,GAAP,CAAWC,GAAX,EAAwB;AACtB,UAAMC,UAAU,GAAG,gEAAnB;AACA,WAAO,KAAKC,MAAL,CAAYD,UAAZ,EAAwBD,GAAxB,CAAP;AACD;;AAED,SAAOG,GAAP,CAAWH,GAAX,EAAwB;AACtB,UAAMC,UAAU,GAAG,YAAnB;AACA,WAAO,KAAKC,MAAL,CAAYD,UAAZ,EAAwBD,GAAxB,CAAP;AACD;;AAED,SAAOI,GAAP,CAAWJ,GAAX,EAAwB;AACtB,UAAMC,UAAU,GAAG,sDAAnB;AACA,WAAO,KAAKC,MAAL,CAAYD,UAAZ,EAAwBD,GAAxB,CAAP;AACD;;AAED,SAAeE,MAAf,CAAsBD,UAAtB,EAA0CD,GAA1C,EAAuD;AACrD,QAAIK,MAAM,GAAG,EAAb;AACA,UAAMC,gBAAgB,GAAGL,UAAU,CAACM,MAApC;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAApB,EAAyBQ,CAAC,EAA1B,EAA8B;AAC5BH,MAAAA,MAAM,IAAIJ,UAAU,CAACQ,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACR,MAAL,KAAgBI,gBAA3B,CAAlB,CAAV;AACD;;AACD,WAAOD,MAAP;AACD;;AAvBU;;AA0Bb,MAAMO,WAAN,CAAkB;AAAA;AAAA,wCACHf,MAAM,CAACgB,UADJ;AAAA;;AAGhBC,EAAAA,eAAe,CAACC,IAAD,EAAe;AAC5B,WAAOC,UAAU,CAAC,CAACD,IAAI,GAAG,KAAKF,UAAb,EAAyBI,OAAzB,CAAiC,CAAjC,CAAD,CAAjB;AACD;;AALe;;AAQlB,MAAMC,MAAN,CAAa;AACXC,EAAAA,gBAAgB,CAACC,IAAD,EAAuB;AACrC,WAAOV,IAAI,CAACW,KAAL,CAAW,CAACC,QAAQ,CAAC1B,MAAM,GAAG2B,MAAT,CAAgB,GAAhB,CAAD,CAAR,GAAiCD,QAAQ,CAAC1B,MAAM,CAACwB,IAAD,CAAN,CAAaG,MAAb,CAAoB,GAApB,CAAD,CAA1C,IAAwE,IAAnF,CAAP;AACD;;AAHU;;AAMb,MAAMC,QAAN,CAAe;AAGbC,EAAAA,GAAG,CAACC,QAAD,EAAqBC,EAArB,EAAyC;AAC1C,UAAMC,QAAQ,GAAGC,WAAW,CAACH,QAAD,EAAWC,EAAX,CAA5B;AACAH,IAAAA,QAAQ,CAACM,GAAT,CAAaC,IAAb,CAAkBH,QAAlB;AACA,WAAOA,QAAP;AACD;;AAEDI,EAAAA,KAAK,CAACC,EAAD,EAAa;AAChBC,IAAAA,aAAa,CAACD,EAAD,CAAb;AACD;;AAED,SAAOE,QAAP,GAAkB;AAChB,SAAI,MAAMF,EAAV,IAAgBT,QAAQ,CAACM,GAAzB,EAA8B;AAC5BI,MAAAA,aAAa,CAACD,EAAD,CAAb;AACD;AACF;;AAjBY;;gBAATT,Q,SACqB,E;;AAmB3B,SAASA,QAAT,EAAmBN,MAAnB,EAA2BN,WAA3B,EAAwCd,MAAxC","sourcesContent":["import moment from 'moment';\n\nimport config from 'config.json';\n\nclass Random {\n  static all(len: number) {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    return this.random(characters, len);\n  }\n\n  static num(len: number) {\n    const characters = '0123456789';\n    return this.random(characters, len);\n  }\n\n  static str(len: number) {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n    return this.random(characters, len);\n  }\n\n  private static random(characters: string, len: number) {\n    let result = '';  \n    const charactersLength = characters.length;\n    for (let i = 0; i < len; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  }\n}\n\nclass Temperature {\n  KELVIN_NUM = config.KELVIN_NUM\n\n  kelvinToCelsius(temp: number) {\n    return parseFloat((temp - this.KELVIN_NUM).toFixed(0));\n  }\n}\n\nclass Moment {\n  getCorrectionSec(time: string): number {\n    return Math.round((parseInt(moment().format('x')) - parseInt(moment(time).format('x'))) / 1000);\n  }\n}\n\nclass Interval {\n  static ids: Array<any> = [];\n\n  set(callback: Function, ms: number): number {\n    const interval = setInterval(callback, ms);\n    Interval.ids.push(interval);\n    return interval;\n  }\n\n  clear(id: number) {\n    clearInterval(id);\n  }\n\n  static clearAll() {\n    for(const id of Interval.ids) {\n      clearInterval(id);\n    }\n  }\n}\n\nexport { Interval, Moment, Temperature, Random };\n"]},"metadata":{},"sourceType":"module"}