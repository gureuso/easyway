{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport axios from 'axios';\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nclass SubwayUI {\n  static setWaitingTime(target, sec) {\n    const ui = new TimeUI();\n    ui.setWaitingTime(target, sec, SubwayUI.setCurrentSubway);\n  }\n\n  static setCurrentSubway(target, stationName, trainLineName) {\n    const api = new SubwayAPI();\n    api.getCurrentSubway(stationName);\n    const subway = new Subway(data);\n    const waitingSec = subway.getWaitingSec();\n\n    if (waitingSec < 1) {\n      target.text(subway.message);\n    } else {\n      SubwayUI.setWaitingTime(target, waitingSec);\n    }\n  }\n\n}\n\nclass SubwayAPI {\n  constructor() {\n    _defineProperty(this, \"API_KEY\", config.SUBWAY_API_KEY);\n\n    _defineProperty(this, \"API_HOST\", config.API_HOST);\n  }\n\n  createSubway(stationName, direction, trainLineName, token) {\n    const form = new FormData();\n    form.append('station_name', stationName);\n    form.append('direction', direction);\n    form.append('train_line_name', trainLineName);\n    form.append('token', token);\n    return axios.post(`${this.API_HOST}/public_transport/subways/create`, form).then(response => {\n      return response.data.data;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteSubway(id, token) {\n    return axios.delete(`${this.API_HOST}/public_transport/subways/${id}/delete?token=${token}`).then(response => {\n      return response.data;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getSubways(token) {\n    return axios.get(`${this.API_HOST}/public_transport/subways?token=${token}`).then(response => {\n      return response.data.data.subways;\n    }).catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getCurrentSubway(stationName) {\n    const url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + stationName;\n    return axios.get(url).then(response => {\n      return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n    }).catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getDaerimWithLine2() {\n    return this.getCurrentSubway('대림').then(list => {\n      let result = undefined;\n\n      for (const data of list) {\n        if (data.updnLine = '외선') {\n          if (!result) {\n            result = data;\n          } else {\n            if (data.updnLine < result.updnLine) {\n              result = data;\n            }\n          }\n        }\n      }\n\n      return result;\n    });\n  }\n\n}\n\nclass Subway {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"apiCallTime\", void 0);\n\n    _defineProperty(this, \"waitingSec\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = _parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  getCorrectionSec() {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec() {\n    return this.waitingSec - this.getCorrectionSec();\n  }\n\n}\n\nexport { SubwayUI, SubwayAPI };","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/lib/subway.tsx"],"names":["axios","Moment","TimeUI","config","SubwayUI","setWaitingTime","target","sec","ui","setCurrentSubway","stationName","trainLineName","api","SubwayAPI","getCurrentSubway","subway","Subway","data","waitingSec","getWaitingSec","text","message","SUBWAY_API_KEY","API_HOST","createSubway","direction","token","form","FormData","append","post","then","response","catch","error","console","log","deleteSubway","id","delete","getSubways","get","subways","url","API_KEY","realtimeArrivalList","getDaerimWithLine2","list","result","undefined","updnLine","constructor","apiCallTime","recptnDt","barvlDt","arvlMsg2","getCorrectionSec","m"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nclass SubwayUI {\n  static setWaitingTime(target: JQuery<HTMLElement>, sec: number) {\n    const ui = new TimeUI();\n    ui.setWaitingTime(target, sec, SubwayUI.setCurrentSubway);\n  }\n\n  static setCurrentSubway(target: JQuery<HTMLElement>, stationName: string, trainLineName: string) {\n    const api = new SubwayAPI();\n    api.getCurrentSubway(stationName)\n    const subway = new Subway(data);\n    const waitingSec = subway.getWaitingSec();\n    if(waitingSec < 1) {\n      target.text(subway.message);\n    } else {\n      SubwayUI.setWaitingTime(target, waitingSec);\n    }\n  }\n}\n\nclass SubwayAPI {\n  API_KEY: string = config.SUBWAY_API_KEY;\n  API_HOST: string = config.API_HOST;\n\n  createSubway(stationName: string, direction: string, trainLineName: string, token: string) {\n    const form = new FormData();\n    form.append('station_name', stationName);\n    form.append('direction', direction);\n    form.append('train_line_name', trainLineName);\n    form.append('token', token);\n\n    return axios.post(`${this.API_HOST}/public_transport/subways/create`, form)\n    .then(response => {\n      return response.data.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteSubway(id: number, token: string) {\n    return axios.delete(`${this.API_HOST}/public_transport/subways/${id}/delete?token=${token}`)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getSubways(token: string) {\n    return axios.get(`${this.API_HOST}/public_transport/subways?token=${token}`)\n    .then(response => {\n      return response.data.data.subways;\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getCurrentSubway(stationName: string) {\n    const url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + stationName;\n    return axios.get(url)\n    .then(response => {\n      return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getDaerimWithLine2() {\n    return this.getCurrentSubway('대림').then(list => {\n      let result = undefined;\n      for(const data of list) {\n        if(data.updnLine = '외선') {\n          if(!result) {\n            result = data;\n          } else {\n            if(data.updnLine < result.updnLine) {\n              result = data;\n            }\n          }\n        }\n      }\n      return result;\n    });\n  }\n}\n\nclass Subway {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  data: {[key: string]: any};\n  apiCallTime: string;\n  waitingSec: number;\n  message: string;\n\n  constructor(data: {[key: string]: any}) {\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  private getCorrectionSec(): number {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec(): number {\n    return this.waitingSec - this.getCorrectionSec();\n  }\n}\n\nexport { SubwayUI, SubwayAPI };\n"]},"metadata":{},"sourceType":"module"}