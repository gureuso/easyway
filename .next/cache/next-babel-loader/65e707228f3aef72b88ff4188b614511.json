{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport moment from 'moment';\nimport $ from 'jquery';\nimport Modal from 'components/modal';\nimport { BusUI, BusAPI } from 'lib/bus';\nimport { WeatherAPI } from 'lib/weather';\nimport { SubwayUI, SubwayAPI } from 'lib/subway';\nimport { Interval } from 'lib/common';\n\nvar List = /*#__PURE__*/function (_React$Component) {\n  _inherits(List, _React$Component);\n\n  var _super = _createSuper(List);\n\n  function List() {\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_ismounted\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentTime: '',\n      currentWeather: __jsx(\"div\", null),\n      buses: [],\n      subways: []\n    });\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"setCurrentTime\",\n    value: function setCurrentTime() {\n      var _this2 = this;\n\n      var interval = new Interval();\n      interval.set(function () {\n        if (_this2._ismounted) {\n          _this2.setState({\n            currentTime: moment().format('HH:mm:ss')\n          });\n        }\n      }, 1000);\n    }\n  }, {\n    key: \"setCurrentWeather\",\n    value: function setCurrentWeather() {\n      var _this3 = this;\n\n      var weatherAPI = new WeatherAPI();\n      weatherAPI.getCurrentWeather().then(function (data) {\n        if (_this3._ismounted) {\n          _this3.setState({\n            currentWeather: __jsx(\"div\", {\n              id: \"current_weather\"\n            }, __jsx(\"div\", {\n              id: \"current_weather_title\",\n              className: \"list\"\n            }, __jsx(\"div\", null, __jsx(\"img\", {\n              src: data.icon\n            })), __jsx(\"div\", null, __jsx(\"p\", null, data.temp, \"\\xB0\"))), __jsx(\"p\", {\n              id: \"current_weather_main\"\n            }, data.main), __jsx(\"p\", {\n              id: \"current_weather_desc\"\n            }, data.desc), __jsx(\"div\", {\n              id: \"current_weather_more\"\n            }, __jsx(\"img\", {\n              src: \"/static/img/plus_btn_01.svg\",\n              onClick: Modal.active\n            })))\n          });\n        }\n      });\n    }\n  }, {\n    key: \"setCurrentBus\",\n    value: function setCurrentBus() {\n      var _this4 = this;\n\n      var api = new BusAPI();\n      api.getBuses(this.props.token).then(function (data) {\n        var arr = [];\n\n        var _iterator = _createForOfIteratorHelper(data),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var bus = _step.value;\n            var key = \"\".concat(bus.station_id).concat(bus.bus_route_id);\n            arr.push(__jsx(\"div\", {\n              className: \"current_bus\",\n              key: key\n            }, __jsx(\"p\", {\n              className: \"current_bus_title\"\n            }, bus.name), __jsx(\"p\", {\n              className: \"current_bus_message\",\n              id: key\n            })));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        _this4.setState({\n          'buses': arr\n        });\n\n        var _iterator2 = _createForOfIteratorHelper(data),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _bus = _step2.value;\n\n            var _key2 = \"\".concat(_bus.station_id).concat(_bus.bus_route_id);\n\n            var target = $(\"#\".concat(_key2));\n            BusUI.setCurrentBus(target, _bus.station_id, _bus.bus_route_id, _bus.ord);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      });\n    }\n  }, {\n    key: \"setCurrentSubway\",\n    value: function setCurrentSubway() {\n      var _this5 = this;\n\n      var subways = {};\n      var api = new SubwayAPI();\n      api.getSubways(this.props.token).then(function (data) {\n        var trainLineNameCnt = 0;\n\n        var _iterator3 = _createForOfIteratorHelper(data),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var subway = _step3.value;\n            subways[subway.station_name] = {};\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        var _iterator4 = _createForOfIteratorHelper(data),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _subway = _step4.value;\n\n            if (subways[_subway.station_name][_subway.direction]) {\n              subways[_subway.station_name][_subway.direction].push(_subway.train_line_name);\n            } else {\n              subways[_subway.station_name][_subway.direction] = [_subway.train_line_name];\n            }\n\n            trainLineNameCnt += 1;\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        var arr = [];\n\n        for (var stationName in subways) {\n          for (var direction in subways[stationName]) {\n            var _iterator5 = _createForOfIteratorHelper(subways[stationName][direction]),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var trainLineName = _step5.value;\n\n                if (trainLineNameCnt > 2) {\n                  arr.push(__jsx(\"div\", {\n                    key: trainLineName,\n                    className: \"current_subway\"\n                  }, __jsx(\"div\", {\n                    className: \"current_subway_title\"\n                  }, trainLineName), __jsx(\"div\", {\n                    className: \"current_subway_message\",\n                    id: trainLineName.replace(/\\s/gi, \"\")\n                  })));\n                } else {\n                  arr.push(__jsx(\"div\", {\n                    key: trainLineName,\n                    className: \"current_subway_solo\"\n                  }, __jsx(\"div\", {\n                    className: \"current_subway_solo_title\"\n                  }, trainLineName), __jsx(\"div\", {\n                    className: \"current_subway_solo_message\",\n                    id: trainLineName.replace(/\\s/gi, \"\")\n                  })));\n                }\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        }\n\n        if (arr.length > 2) {\n          _this5.setState({\n            'subways': __jsx(\"div\", null, arr)\n          });\n        } else {\n          _this5.setState({\n            'subways': arr\n          });\n        }\n\n        for (var _stationName in subways) {\n          for (var _direction in subways[_stationName]) {\n            var _iterator6 = _createForOfIteratorHelper(subways[_stationName][_direction]),\n                _step6;\n\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                var _trainLineName = _step6.value;\n                var target = $(\"#\".concat(_trainLineName.replace(/\\s/gi, \"\")));\n                SubwayUI.setCurrentSubway(target, _stationName, _trainLineName);\n              }\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"setAll\",\n    value: function setAll() {\n      this.setCurrentTime();\n      this.setCurrentWeather();\n      this.setCurrentBus();\n      this.setCurrentSubway();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._ismounted = true;\n      this.setAll();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._ismounted = false;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.refresh == true) {\n        this.setAll();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"content\"\n      }, __jsx(\"div\", {\n        className: \"inner-content\",\n        id: \"list\"\n      }, __jsx(\"div\", {\n        className: \"list\"\n      }, __jsx(\"div\", null, __jsx(\"p\", {\n        id: \"current_time\"\n      }, this.state.currentTime)), __jsx(\"div\", null, this.state.currentWeather), this.state.buses, this.state.subways)));\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\nexport default List;","map":null,"metadata":{},"sourceType":"module"}