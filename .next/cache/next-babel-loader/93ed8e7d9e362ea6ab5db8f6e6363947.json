{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/yjh/Documents/React/easyway/components/pages/list.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport moment from 'moment';\nimport $ from 'jquery';\nimport Modal from 'components/modal';\nimport { BusUI, BusAPI } from 'lib/bus';\nimport { WeatherAPI } from 'lib/weather';\nimport { SubwayUI, SubwayAPI } from 'lib/subway';\nimport { Interval } from 'lib/common';\n\nclass List extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_ismounted\", true);\n\n    _defineProperty(this, \"state\", {\n      currentTime: '',\n      currentWeather: __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }),\n      buses: [],\n      subways: [],\n      adsense: __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      })\n    });\n  }\n\n  setCurrentTime() {\n    const interval = new Interval();\n    interval.set(() => {\n      if (this._ismounted) {\n        this.setState({\n          currentTime: moment().format('HH:mm:ss')\n        });\n      }\n    }, 1000);\n  }\n\n  setCurrentWeather() {\n    const weatherAPI = new WeatherAPI();\n    weatherAPI.getCurrentWeather().then(data => {\n      if (this._ismounted) {\n        this.setState({\n          currentWeather: __jsx(\"div\", {\n            id: \"current_weather\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          }, __jsx(\"div\", {\n            id: \"current_weather_title\",\n            className: \"list\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          }, __jsx(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          }, __jsx(\"img\", {\n            src: data.icon,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          })), __jsx(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }, __jsx(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }, data.temp, \"\\xB0\"))), __jsx(\"p\", {\n            id: \"current_weather_main\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, data.main), __jsx(\"p\", {\n            id: \"current_weather_desc\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, data.desc), __jsx(\"div\", {\n            id: \"current_weather_more\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, __jsx(\"img\", {\n            src: \"/static/img/plus_btn_01.svg\",\n            onClick: Modal.active,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          })))\n        });\n      }\n    });\n  }\n\n  setCurrentBus() {\n    const api = new BusAPI();\n    api.getBuses(this.props.token).then(data => {\n      let arr = [];\n\n      for (let bus of data) {\n        const key = `${bus.station_id}${bus.bus_route_id}`;\n        arr.push(__jsx(\"div\", {\n          className: \"current_bus\",\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, __jsx(\"p\", {\n          className: \"current_bus_title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, bus.name), __jsx(\"p\", {\n          className: \"current_bus_message\",\n          id: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        })));\n      }\n\n      this.setState({\n        'buses': arr\n      });\n\n      for (let bus of data) {\n        const key = `${bus.station_id}${bus.bus_route_id}`;\n        const target = $(`#${key}`);\n        BusUI.setCurrentBus(target, bus.station_id, bus.bus_route_id, bus.ord);\n      }\n    });\n  }\n\n  setCurrentSubway() {\n    let subways = {};\n    const api = new SubwayAPI();\n    api.getSubways(this.props.token).then(data => {\n      let trainLineNameCnt = 0;\n\n      for (let subway of data) {\n        subways[subway.station_name] = {};\n      }\n\n      for (let subway of data) {\n        if (subways[subway.station_name][subway.direction]) {\n          subways[subway.station_name][subway.direction].push(subway.train_line_name);\n        } else {\n          subways[subway.station_name][subway.direction] = [subway.train_line_name];\n        }\n\n        trainLineNameCnt += 1;\n      }\n\n      let arr = [];\n\n      for (let stationName in subways) {\n        for (let direction in subways[stationName]) {\n          for (let trainLineName of subways[stationName][direction]) {\n            if (trainLineNameCnt > 2) {\n              arr.push(__jsx(\"div\", {\n                key: trainLineName,\n                className: \"current_subway\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 116\n                },\n                __self: this\n              }, __jsx(\"div\", {\n                className: \"current_subway_title\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 117\n                },\n                __self: this\n              }, trainLineName), __jsx(\"div\", {\n                className: \"current_subway_message\",\n                id: trainLineName.replace(/\\s/gi, \"\"),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 118\n                },\n                __self: this\n              })));\n            } else {\n              arr.push(__jsx(\"div\", {\n                key: trainLineName,\n                className: \"current_subway_solo\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 123\n                },\n                __self: this\n              }, __jsx(\"div\", {\n                className: \"current_subway_solo_title\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 124\n                },\n                __self: this\n              }, trainLineName), __jsx(\"div\", {\n                className: \"current_subway_solo_message\",\n                id: trainLineName.replace(/\\s/gi, \"\"),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 125\n                },\n                __self: this\n              })));\n            }\n          }\n        }\n      }\n\n      if (arr.length > 2) {\n        this.setState({\n          'subways': __jsx(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          }, arr)\n        });\n      } else {\n        this.setState({\n          'subways': arr\n        });\n      }\n\n      for (let stationName in subways) {\n        for (let direction in subways[stationName]) {\n          for (let trainLineName of subways[stationName][direction]) {\n            const target = $(`#${trainLineName.replace(/\\s/gi, \"\")}`);\n            SubwayUI.setCurrentSubway(target, stationName, trainLineName);\n          }\n        }\n      }\n    });\n  }\n\n  setAdsense() {\n    const len = this.state.buses.length + this.state.subways.length;\n    console.log(len);\n\n    if (len % 2 == 1) {}\n\n    __jsx(\"ins\", {\n      className: \"adsbygoogle\",\n      style: {\n        display: \"block\"\n      },\n      \"data-ad-client\": \"ca-pub-6199525334928216\",\n      \"data-ad-slot\": \"1592697080\",\n      \"data-ad-format\": \"auto\",\n      \"data-full-width-responsive\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    });\n  }\n\n  setAll() {\n    this.setCurrentTime();\n    this.setCurrentWeather();\n    this.setCurrentBus();\n    this.setCurrentSubway();\n    this.setAdsense();\n  }\n\n  componentDidMount() {\n    this._ismounted = true;\n    this.setAll();\n  }\n\n  componentWillUnmount() {\n    this._ismounted = false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.refresh == true) {\n      this.setAll();\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"inner-content\",\n      id: \"list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      id: \"current_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, this.state.currentTime)), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, this.state.currentWeather), this.state.buses, this.state.subways)));\n  }\n\n}\n\nexport default List;","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/components/pages/list.tsx"],"names":["React","moment","$","Modal","BusUI","BusAPI","WeatherAPI","SubwayUI","SubwayAPI","Interval","List","Component","currentTime","currentWeather","buses","subways","adsense","setCurrentTime","interval","set","_ismounted","setState","format","setCurrentWeather","weatherAPI","getCurrentWeather","then","data","icon","temp","main","desc","active","setCurrentBus","api","getBuses","props","token","arr","bus","key","station_id","bus_route_id","push","name","target","ord","setCurrentSubway","getSubways","trainLineNameCnt","subway","station_name","direction","train_line_name","stationName","trainLineName","replace","length","setAdsense","len","state","console","log","display","setAll","componentDidMount","componentWillUnmount","componentWillReceiveProps","nextProps","refresh","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport $ from 'jquery';\n\nimport Modal from 'components/modal';\nimport { BusUI, BusAPI } from 'lib/bus';\nimport { WeatherAPI } from 'lib/weather';\nimport { SubwayUI, SubwayAPI } from 'lib/subway';\nimport { Interval } from 'lib/common';\n\ninterface ListProps {\n  refresh: boolean,\n  token: string\n}\n\ninterface ListStates {\n  currentTime: string,\n  currentWeather: JSX.Element,\n  buses: JSX.Element[],\n  subways: any,\n  adsense: JSX.Element\n}\n\nclass List extends React.Component<ListProps, ListStates> {\n  _ismounted: boolean = true;\n\n  state = {\n    currentTime: '',\n    currentWeather: (<div></div>),\n    buses: [],\n    subways: [],\n    adsense: (<div></div>)\n  };\n\n  setCurrentTime() {\n    const interval = new Interval();\n    interval.set(() => {\n      if(this._ismounted) {\n        this.setState({currentTime: moment().format('HH:mm:ss')});\n      }\n    }, 1000);\n  }\n\n  setCurrentWeather() {\n    const weatherAPI = new WeatherAPI();\n    weatherAPI.getCurrentWeather().then((data: any) => {\n      if(this._ismounted) {\n        this.setState({currentWeather: (\n          <div id=\"current_weather\">\n            <div id=\"current_weather_title\" className=\"list\">\n              <div><img src={data.icon}/></div>\n              <div><p>{data.temp}°</p></div>\n            </div>\n            <p id=\"current_weather_main\">{data.main}</p>\n            <p id=\"current_weather_desc\">{data.desc}</p>\n            <div id=\"current_weather_more\">\n              <img src=\"/static/img/plus_btn_01.svg\" onClick={Modal.active}/>\n            </div>\n          </div>\n        )});\n      }\n    });\n  }\n\n  setCurrentBus() {\n    const api = new BusAPI();\n    api.getBuses(this.props.token).then(data => {\n      let arr: JSX.Element[] = [];\n      for(let bus of data) {\n        const key = `${bus.station_id}${bus.bus_route_id}`;\n        arr.push(\n          <div className=\"current_bus\" key={key}>\n            <p className=\"current_bus_title\">{bus.name}</p>\n            <p className=\"current_bus_message\" id={key}></p>\n          </div>\n        )\n      }\n      this.setState({'buses': arr});\n      \n      for(let bus of data) {\n        const key = `${bus.station_id}${bus.bus_route_id}`;\n        const target = $(`#${key}`);\n        BusUI.setCurrentBus(target, bus.station_id, bus.bus_route_id, bus.ord);\n      }\n    });\n  }\n\n  setCurrentSubway() {\n    let subways: any = {};\n    const api = new SubwayAPI();\n    api.getSubways(this.props.token).then(data => {\n      let trainLineNameCnt = 0;\n\n      for(let subway of data) {\n        subways[subway.station_name] = {}\n      }\n      for(let subway of data) {\n        if(subways[subway.station_name][subway.direction]) {\n          subways[subway.station_name][subway.direction].push(\n            subway.train_line_name\n          );\n        } else {\n          subways[subway.station_name][subway.direction] = [\n            subway.train_line_name\n          ];\n        }\n        trainLineNameCnt += 1;\n      }\n      \n      let arr: JSX.Element[] = []\n      for(let stationName in subways) {\n        for(let direction in subways[stationName]) {\n          for(let trainLineName of subways[stationName][direction]) {\n            if(trainLineNameCnt > 2) {\n              arr.push(\n                <div key={trainLineName} className=\"current_subway\">\n                  <div className=\"current_subway_title\">{trainLineName}</div>\n                  <div className=\"current_subway_message\" id={trainLineName.replace(/\\s/gi, \"\")}></div>\n                </div>\n              );\n            } else {\n              arr.push(\n                <div key={trainLineName} className=\"current_subway_solo\">\n                  <div className=\"current_subway_solo_title\">{trainLineName}</div>\n                  <div className=\"current_subway_solo_message\" id={trainLineName.replace(/\\s/gi, \"\")}></div>\n                </div>\n              );\n            }\n          }\n        }\n      }\n      if(arr.length > 2) {\n        this.setState({'subways': (<div>{arr}</div>)});\n      } else {\n        this.setState({'subways': arr});\n      }\n\n      for(let stationName in subways) {\n        for(let direction in subways[stationName]) {\n          for(let trainLineName of subways[stationName][direction]) {\n            const target = $(`#${trainLineName.replace(/\\s/gi, \"\")}`);\n            SubwayUI.setCurrentSubway(target, stationName, trainLineName);\n          }\n        }\n      }\n    });\n  }\n\n  setAdsense() {\n    const len = this.state.buses.length + this.state.subways.length;\n    console.log(len)\n    if(len % 2 == 1) {\n      \n    }\n    \n    <ins className=\"adsbygoogle\"\n      style={{display: \"block\"}}\n      data-ad-client=\"ca-pub-6199525334928216\"\n      data-ad-slot=\"1592697080\"\n      data-ad-format=\"auto\"\n      data-full-width-responsive=\"true\"></ins>\n  }\n\n  setAll() {\n    this.setCurrentTime();\n    this.setCurrentWeather();\n    this.setCurrentBus();\n    this.setCurrentSubway();\n    this.setAdsense();\n  }\n\n  componentDidMount() {\n    this._ismounted = true;\n    this.setAll();\n  }\n  \n  componentWillUnmount() {\n     this._ismounted = false;\n  }\n\n  componentWillReceiveProps(nextProps: any) {\n    if(nextProps.refresh == true) {\n      this.setAll();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"inner-content\" id=\"list\">\n          <div className=\"list\">\n            <div>\n              <p id=\"current_time\">{this.state.currentTime}</p>\n            </div>\n\n            <div>{this.state.currentWeather}</div>\n\n            {this.state.buses}\n\n            {this.state.subways}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}