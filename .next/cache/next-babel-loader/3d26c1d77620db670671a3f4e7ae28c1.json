{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nvar SubwayUI =\n/*#__PURE__*/\nfunction () {\n  function SubwayUI() {\n    _classCallCheck(this, SubwayUI);\n  }\n\n  _createClass(SubwayUI, null, [{\n    key: \"setWaitingTime\",\n    value: function setWaitingTime(target, sec) {\n      var ui = new TimeUI();\n      ui.setWaitingTime(target, sec, SubwayUI.setCurrentSubway);\n    }\n  }, {\n    key: \"setCurrentSubway\",\n    value: function setCurrentSubway(target, data) {\n      console.log(data);\n      var subway = new Subway(data);\n      var waitingSec = subway.getWaitingSec();\n\n      if (waitingSec < 1) {\n        target.text(subway.message);\n      } else {\n        SubwayUI.setWaitingTime(target, waitingSec);\n      }\n    }\n  }]);\n\n  return SubwayUI;\n}();\n\nvar SubwayAPI =\n/*#__PURE__*/\nfunction () {\n  function SubwayAPI() {\n    _classCallCheck(this, SubwayAPI);\n\n    _defineProperty(this, \"API_KEY\", config.SUBWAY_API_KEY);\n\n    _defineProperty(this, \"API_HOST\", config.API_HOST);\n  }\n\n  _createClass(SubwayAPI, [{\n    key: \"createSubway\",\n    value: function createSubway(stationName, direction, trainLineName, token) {\n      var form = new FormData();\n      form.append('station_name', stationName);\n      form.append('direction', direction);\n      form.append('train_line_name', trainLineName);\n      form.append('token', token);\n      return axios.post(\"\".concat(this.API_HOST, \"/public_transport/subways/create\"), form).then(function (response) {\n        return response.data.data;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return {};\n      });\n    }\n  }, {\n    key: \"deleteSubway\",\n    value: function deleteSubway(id, token) {\n      return axios[\"delete\"](\"\".concat(this.API_HOST, \"/public_transport/subways/\").concat(id, \"/delete?token=\").concat(token)).then(function (response) {\n        return response.data;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return {};\n      });\n    }\n  }, {\n    key: \"getSubways\",\n    value: function getSubways(token) {\n      return axios.get(\"\".concat(this.API_HOST, \"/public_transport/subways?token=\").concat(token)).then(function (response) {\n        return response.data.data.subways;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return [];\n      });\n    }\n  }, {\n    key: \"getCurrentSubway\",\n    value: function getCurrentSubway(stationName) {\n      var url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + stationName;\n      return axios.get(url).then(function (response) {\n        return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return [];\n      });\n    }\n  }, {\n    key: \"getDaerimWithLine2\",\n    value: function getDaerimWithLine2() {\n      return this.getCurrentSubway('대림').then(function (list) {\n        var result = undefined;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(list), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var data = _step.value;\n\n            if (data.updnLine = '외선') {\n              if (!result) {\n                result = data;\n              } else {\n                if (data.updnLine < result.updnLine) {\n                  result = data;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return result;\n      });\n    }\n  }]);\n\n  return SubwayAPI;\n}();\n\nvar Subway =\n/*#__PURE__*/\nfunction () {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  function Subway(data) {\n    _classCallCheck(this, Subway);\n\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"apiCallTime\", void 0);\n\n    _defineProperty(this, \"waitingSec\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = _parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  _createClass(Subway, [{\n    key: \"getCorrectionSec\",\n    value: function getCorrectionSec() {\n      var m = new Moment();\n      return m.getCorrectionSec(this.apiCallTime);\n    }\n  }, {\n    key: \"getWaitingSec\",\n    value: function getWaitingSec() {\n      return this.waitingSec - this.getCorrectionSec();\n    }\n  }]);\n\n  return Subway;\n}();\n\nexport { SubwayUI, SubwayAPI };","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/lib/subway.tsx"],"names":["axios","Moment","TimeUI","config","SubwayUI","target","sec","ui","setWaitingTime","setCurrentSubway","data","console","log","subway","Subway","waitingSec","getWaitingSec","text","message","SubwayAPI","SUBWAY_API_KEY","API_HOST","stationName","direction","trainLineName","token","form","FormData","append","post","then","response","error","id","get","subways","url","API_KEY","realtimeArrivalList","getCurrentSubway","list","result","undefined","updnLine","apiCallTime","recptnDt","barvlDt","arvlMsg2","m","getCorrectionSec"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nclass SubwayUI {\n  static setWaitingTime(target: JQuery<HTMLElement>, sec: number) {\n    const ui = new TimeUI();\n    ui.setWaitingTime(target, sec, SubwayUI.setCurrentSubway);\n  }\n\n  static setCurrentSubway(target: JQuery<HTMLElement>, data: any) {\n    console.log(data);\n    const subway = new Subway(data);\n    const waitingSec = subway.getWaitingSec();\n    if(waitingSec < 1) {\n      target.text(subway.message);\n    } else {\n      SubwayUI.setWaitingTime(target, waitingSec);\n    }\n  }\n}\n\nclass SubwayAPI {\n  API_KEY: string = config.SUBWAY_API_KEY;\n  API_HOST: string = config.API_HOST;\n\n  createSubway(stationName: string, direction: string, trainLineName: string, token: string) {\n    const form = new FormData();\n    form.append('station_name', stationName);\n    form.append('direction', direction);\n    form.append('train_line_name', trainLineName);\n    form.append('token', token);\n\n    return axios.post(`${this.API_HOST}/public_transport/subways/create`, form)\n    .then(response => {\n      return response.data.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteSubway(id: number, token: string) {\n    return axios.delete(`${this.API_HOST}/public_transport/subways/${id}/delete?token=${token}`)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getSubways(token: string) {\n    return axios.get(`${this.API_HOST}/public_transport/subways?token=${token}`)\n    .then(response => {\n      return response.data.data.subways;\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getCurrentSubway(stationName: string) {\n    const url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + stationName;\n    return axios.get(url)\n    .then(response => {\n      return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getDaerimWithLine2() {\n    return this.getCurrentSubway('대림').then(list => {\n      let result = undefined;\n      for(const data of list) {\n        if(data.updnLine = '외선') {\n          if(!result) {\n            result = data;\n          } else {\n            if(data.updnLine < result.updnLine) {\n              result = data;\n            }\n          }\n        }\n      }\n      return result;\n    });\n  }\n}\n\nclass Subway {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  data: {[key: string]: any};\n  apiCallTime: string;\n  waitingSec: number;\n  message: string;\n\n  constructor(data: {[key: string]: any}) {\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  private getCorrectionSec(): number {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec(): number {\n    return this.waitingSec - this.getCorrectionSec();\n  }\n}\n\nexport { SubwayUI, SubwayAPI };\n"]},"metadata":{},"sourceType":"module"}