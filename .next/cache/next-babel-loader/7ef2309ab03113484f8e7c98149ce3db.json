{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from 'axios';\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nvar SubwayUI = /*#__PURE__*/function () {\n  function SubwayUI() {\n    _classCallCheck(this, SubwayUI);\n  }\n\n  _createClass(SubwayUI, null, [{\n    key: \"setWaitingTime\",\n    value: function setWaitingTime(target, sec, stationName, trainLineName) {\n      var ui = new TimeUI();\n      ui.setWaitingTimeWithSubway(target, sec, SubwayUI.setCurrentSubway, stationName, trainLineName);\n    }\n  }, {\n    key: \"setCurrentSubway\",\n    value: function setCurrentSubway(target, stationName, trainLineName) {\n      var api = new SubwayAPI();\n      api.getCurrentSubway(stationName).then(function (data) {\n        var _iterator = _createForOfIteratorHelper(data),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var d = _step.value;\n\n            if (d.trainLineNm == trainLineName) {\n              var subway = new Subway(d);\n              var waitingSec = subway.getWaitingSec();\n\n              if (waitingSec < 1) {\n                target.text(subway.message);\n              } else {\n                SubwayUI.setWaitingTime(target, waitingSec, stationName, trainLineName);\n              }\n\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    }\n  }]);\n\n  return SubwayUI;\n}();\n\nvar SubwayAPI = /*#__PURE__*/function () {\n  function SubwayAPI() {\n    _classCallCheck(this, SubwayAPI);\n\n    _defineProperty(this, \"API_KEY\", config.SUBWAY_API_KEY);\n\n    _defineProperty(this, \"API_HOST\", config.API_HOST);\n  }\n\n  _createClass(SubwayAPI, [{\n    key: \"createSubway\",\n    value: function createSubway(stationName, direction, trainLineName, token) {\n      var form = new FormData();\n      form.append('station_name', stationName);\n      form.append('direction', direction);\n      form.append('train_line_name', trainLineName);\n      form.append('token', token);\n      return axios.post(\"\".concat(this.API_HOST, \"/public_transport/subways/create\"), form).then(function (response) {\n        return response.data.data;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return {};\n      });\n    }\n  }, {\n    key: \"deleteSubway\",\n    value: function deleteSubway(id, token) {\n      return axios[\"delete\"](\"\".concat(this.API_HOST, \"/public_transport/subways/\").concat(id, \"/delete?token=\").concat(token)).then(function (response) {\n        return response.data;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return {};\n      });\n    }\n  }, {\n    key: \"getSubways\",\n    value: function getSubways(token) {\n      return axios.get(\"\".concat(this.API_HOST, \"/public_transport/subways?token=\").concat(token)).then(function (response) {\n        return response.data.data.subways;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return [];\n      });\n    }\n  }, {\n    key: \"getCurrentSubway\",\n    value: function getCurrentSubway(stationName) {\n      var url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + stationName;\n      return axios.get(url).then(function (response) {\n        return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return [];\n      });\n    }\n  }]);\n\n  return SubwayAPI;\n}();\n\nvar Subway = /*#__PURE__*/function () {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  function Subway(data) {\n    _classCallCheck(this, Subway);\n\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"apiCallTime\", void 0);\n\n    _defineProperty(this, \"waitingSec\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  _createClass(Subway, [{\n    key: \"getCorrectionSec\",\n    value: function getCorrectionSec() {\n      var m = new Moment();\n      return m.getCorrectionSec(this.apiCallTime);\n    }\n  }, {\n    key: \"getWaitingSec\",\n    value: function getWaitingSec() {\n      return this.waitingSec - this.getCorrectionSec();\n    }\n  }]);\n\n  return Subway;\n}();\n\nexport { SubwayUI, SubwayAPI };","map":null,"metadata":{},"sourceType":"module"}