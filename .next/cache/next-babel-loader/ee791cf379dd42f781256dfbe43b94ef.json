{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport axios from 'axios';\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nclass SubwayUI {\n  static setWaitingTime(target, sec, stationName, trainLineName) {\n    const ui = new TimeUI();\n    ui.setWaitingTimeWithSubway(target, sec, SubwayUI.setCurrentSubway, stationName, trainLineName);\n  }\n\n  static setCurrentSubway(target, stationName, trainLineName) {\n    const api = new SubwayAPI();\n    api.getCurrentSubway(stationName).then(data => {\n      for (let d of data) {\n        if (d.trainLineNm == trainLineName) {\n          const subway = new Subway(d);\n          const waitingSec = subway.getWaitingSec();\n\n          if (waitingSec < 1) {\n            target.text(subway.message);\n          } else {\n            SubwayUI.setWaitingTime(target, waitingSec, stationName, trainLineName);\n          }\n\n          break;\n        }\n      }\n    });\n  }\n\n}\n\nclass SubwayAPI {\n  constructor() {\n    _defineProperty(this, \"API_KEY\", config.SUBWAY_API_KEY);\n\n    _defineProperty(this, \"API_HOST\", config.API_HOST);\n  }\n\n  createSubway(stationName, direction, trainLineName, token) {\n    const form = new FormData();\n    form.append('station_name', stationName);\n    form.append('direction', direction);\n    form.append('train_line_name', trainLineName);\n    form.append('token', token);\n    return axios.post(`${this.API_HOST}/public_transport/subways/create`, form).then(response => {\n      return response.data.data;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteSubway(id, token) {\n    return axios.delete(`${this.API_HOST}/public_transport/subways/${id}/delete?token=${token}`).then(response => {\n      return response.data;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getSubways(token) {\n    return axios.get(`${this.API_HOST}/public_transport/subways?token=${token}`).then(response => {\n      return response.data.data.subways;\n    }).catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getCurrentSubway(stationName) {\n    const url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + stationName;\n    return axios.get(url).then(response => {\n      return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n    }).catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n}\n\nclass Subway {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"apiCallTime\", void 0);\n\n    _defineProperty(this, \"waitingSec\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = _parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  getCorrectionSec() {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec() {\n    return this.waitingSec - this.getCorrectionSec();\n  }\n\n}\n\nexport { SubwayUI, SubwayAPI };","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/lib/subway.tsx"],"names":["axios","Moment","TimeUI","config","SubwayUI","setWaitingTime","target","sec","stationName","trainLineName","ui","setWaitingTimeWithSubway","setCurrentSubway","api","SubwayAPI","getCurrentSubway","then","data","d","trainLineNm","subway","Subway","waitingSec","getWaitingSec","text","message","SUBWAY_API_KEY","API_HOST","createSubway","direction","token","form","FormData","append","post","response","catch","error","console","log","deleteSubway","id","delete","getSubways","get","subways","url","API_KEY","realtimeArrivalList","constructor","apiCallTime","recptnDt","barvlDt","arvlMsg2","getCorrectionSec","m"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nclass SubwayUI {\n  static setWaitingTime(target: JQuery<HTMLElement>, sec: number, stationName: string, trainLineName: string) {\n    const ui = new TimeUI();\n    ui.setWaitingTimeWithSubway(target, sec, SubwayUI.setCurrentSubway, stationName, trainLineName);\n  }\n\n  static setCurrentSubway(target: JQuery<HTMLElement>, stationName: string, trainLineName: string) {\n    const api = new SubwayAPI();\n    api.getCurrentSubway(stationName).then(data => {\n      for(let d of data) {\n        if(d.trainLineNm == trainLineName) {\n          const subway = new Subway(d);\n          const waitingSec = subway.getWaitingSec();\n          if(waitingSec < 1) {\n            target.text(subway.message);\n          } else {\n            SubwayUI.setWaitingTime(target, waitingSec, stationName, trainLineName);\n          }\n          break;\n        }\n      }\n    });\n  }\n}\n\nclass SubwayAPI {\n  API_KEY: string = config.SUBWAY_API_KEY;\n  API_HOST: string = config.API_HOST;\n\n  createSubway(stationName: string, direction: string, trainLineName: string, token: string) {\n    const form = new FormData();\n    form.append('station_name', stationName);\n    form.append('direction', direction);\n    form.append('train_line_name', trainLineName);\n    form.append('token', token);\n\n    return axios.post(`${this.API_HOST}/public_transport/subways/create`, form)\n    .then(response => {\n      return response.data.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteSubway(id: number, token: string) {\n    return axios.delete(`${this.API_HOST}/public_transport/subways/${id}/delete?token=${token}`)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getSubways(token: string) {\n    return axios.get(`${this.API_HOST}/public_transport/subways?token=${token}`)\n    .then(response => {\n      return response.data.data.subways;\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getCurrentSubway(stationName: string) {\n    const url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + stationName;\n    return axios.get(url)\n    .then(response => {\n      return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n}\n\nclass Subway {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  data: {[key: string]: any};\n  apiCallTime: string;\n  waitingSec: number;\n  message: string;\n\n  constructor(data: {[key: string]: any}) {\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  private getCorrectionSec(): number {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec(): number {\n    return this.waitingSec - this.getCorrectionSec();\n  }\n}\n\nexport { SubwayUI, SubwayAPI };\n"]},"metadata":{},"sourceType":"module"}