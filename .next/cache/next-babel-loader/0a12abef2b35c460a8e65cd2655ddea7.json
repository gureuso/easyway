{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport moment from 'moment';\nimport config from '../config.json';\n\nvar Temperature =\n/*#__PURE__*/\nfunction () {\n  function Temperature() {\n    _classCallCheck(this, Temperature);\n\n    _defineProperty(this, \"KELVIN_NUM\", config.KELVIN_NUM);\n  }\n\n  _createClass(Temperature, [{\n    key: \"kelvinToCelsius\",\n    value: function kelvinToCelsius(temp) {\n      return _parseFloat((temp - this.KELVIN_NUM).toFixed(0));\n    }\n  }]);\n\n  return Temperature;\n}();\n\nvar Moment =\n/*#__PURE__*/\nfunction () {\n  function Moment() {\n    _classCallCheck(this, Moment);\n  }\n\n  _createClass(Moment, [{\n    key: \"getCorrectionSec\",\n    value: function getCorrectionSec(time) {\n      return Math.round((_parseInt(moment().format('x')) - _parseInt(moment(time).format('x'))) / 1000);\n    }\n  }]);\n\n  return Moment;\n}();\n\nvar Interval =\n/*#__PURE__*/\nfunction () {\n  function Interval() {\n    _classCallCheck(this, Interval);\n  }\n\n  _createClass(Interval, [{\n    key: \"set\",\n    value: function set(callback, ms) {\n      var interval = setInterval(callback, ms);\n      Interval.ids.push(interval);\n      return interval;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(id) {\n      clearInterval(id);\n    }\n  }], [{\n    key: \"clearAll\",\n    value: function clearAll() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(Interval.ids), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var id = _step.value;\n          clearInterval(id);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return Interval;\n}();\n\n_defineProperty(Interval, \"ids\", []);\n\nexport { Interval, Moment, Temperature };","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/lib/common.tsx"],"names":["moment","config","Temperature","KELVIN_NUM","temp","toFixed","Moment","time","Math","round","format","Interval","callback","ms","interval","setInterval","ids","push","id","clearInterval"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAOC,MAAP,MAAmB,gBAAnB;;IAEMC,W;;;;;;wCACSD,MAAM,CAACE,U;;;;;oCAEJC,I,EAAc;AAC5B,aAAO,YAAW,CAACA,IAAI,GAAG,KAAKD,UAAb,EAAyBE,OAAzB,CAAiC,CAAjC,CAAX,CAAP;AACD;;;;;;IAGGC,M;;;;;;;;;qCACaC,I,EAAsB;AACrC,aAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,UAAST,MAAM,GAAGU,MAAT,CAAgB,GAAhB,CAAT,IAAiC,UAASV,MAAM,CAACO,IAAD,CAAN,CAAaG,MAAb,CAAoB,GAApB,CAAT,CAAlC,IAAwE,IAAnF,CAAP;AACD;;;;;;IAGGC,Q;;;;;;;;;wBAGAC,Q,EAAoBC,E,EAAoB;AAC1C,UAAMC,QAAQ,GAAGC,WAAW,CAACH,QAAD,EAAWC,EAAX,CAA5B;AACAF,MAAAA,QAAQ,CAACK,GAAT,CAAaC,IAAb,CAAkBH,QAAlB;AACA,aAAOA,QAAP;AACD;;;0BAEKI,E,EAAY;AAChBC,MAAAA,aAAa,CAACD,EAAD,CAAb;AACD;;;+BAEiB;AAAA;AAAA;AAAA;;AAAA;AAChB,0CAAgBP,QAAQ,CAACK,GAAzB,4GAA8B;AAAA,cAApBE,EAAoB;AAC5BC,UAAAA,aAAa,CAACD,EAAD,CAAb;AACD;AAHe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIjB;;;;;;gBAjBGP,Q,SACqB,E;;AAmB3B,SAASA,QAAT,EAAmBL,MAAnB,EAA2BJ,WAA3B","sourcesContent":["import moment from 'moment';\n\nimport config from '../config.json';\n\nclass Temperature {\n  KELVIN_NUM = config.KELVIN_NUM\n\n  kelvinToCelsius(temp: number) {\n    return parseFloat((temp - this.KELVIN_NUM).toFixed(0));\n  }\n}\n\nclass Moment {\n  getCorrectionSec(time: string): number {\n    return Math.round((parseInt(moment().format('x')) - parseInt(moment(time).format('x'))) / 1000);\n  }\n}\n\nclass Interval {\n  static ids: Array<any> = [];\n\n  set(callback: Function, ms: number): number {\n    const interval = setInterval(callback, ms);\n    Interval.ids.push(interval);\n    return interval;\n  }\n\n  clear(id: number) {\n    clearInterval(id);\n  }\n\n  static clearAll() {\n    for(const id of Interval.ids) {\n      clearInterval(id);\n    }\n  }\n}\n\nexport { Interval, Moment, Temperature };\n"]},"metadata":{},"sourceType":"module"}