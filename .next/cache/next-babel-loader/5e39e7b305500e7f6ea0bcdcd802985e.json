{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport moment from 'moment';\nimport config from '../config.json';\n\nclass Temperature {\n  constructor() {\n    _defineProperty(this, \"KELVIN_NUM\", config.KELVIN_NUM);\n  }\n\n  kelvinToCelsius(temp) {\n    return _parseFloat((temp - this.KELVIN_NUM).toFixed(0));\n  }\n\n}\n\nclass Moment {\n  getCorrectionSec(time) {\n    return Math.round((_parseInt(moment().format('x')) - _parseInt(moment(time).format('x'))) / 1000);\n  }\n\n}\n\nclass Interval {\n  set(callback, ms) {\n    const interval = setInterval(callback, ms);\n    Interval.ids.push(interval);\n    return interval;\n  }\n\n  clear(id) {\n    clearInterval(id);\n  }\n\n  static clearAll() {\n    for (const id of Interval.ids) {\n      clearInterval(id);\n    }\n  }\n\n}\n\n_defineProperty(Interval, \"ids\", []);\n\nexport { Interval, Moment, Temperature };","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/lib/common.tsx"],"names":["moment","config","Temperature","KELVIN_NUM","kelvinToCelsius","temp","toFixed","Moment","getCorrectionSec","time","Math","round","format","Interval","set","callback","ms","interval","setInterval","ids","push","clear","id","clearInterval","clearAll"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAOC,MAAP,MAAmB,gBAAnB;;AAEA,MAAMC,WAAN,CAAkB;AAAA;AAAA,wCACHD,MAAM,CAACE,UADJ;AAAA;;AAGhBC,EAAAA,eAAe,CAACC,IAAD,EAAe;AAC5B,WAAO,YAAW,CAACA,IAAI,GAAG,KAAKF,UAAb,EAAyBG,OAAzB,CAAiC,CAAjC,CAAX,CAAP;AACD;;AALe;;AAQlB,MAAMC,MAAN,CAAa;AACXC,EAAAA,gBAAgB,CAACC,IAAD,EAAuB;AACrC,WAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,UAASX,MAAM,GAAGY,MAAT,CAAgB,GAAhB,CAAT,IAAiC,UAASZ,MAAM,CAACS,IAAD,CAAN,CAAaG,MAAb,CAAoB,GAApB,CAAT,CAAlC,IAAwE,IAAnF,CAAP;AACD;;AAHU;;AAMb,MAAMC,QAAN,CAAe;AAGbC,EAAAA,GAAG,CAACC,QAAD,EAAqBC,EAArB,EAAyC;AAC1C,UAAMC,QAAQ,GAAGC,WAAW,CAACH,QAAD,EAAWC,EAAX,CAA5B;AACAH,IAAAA,QAAQ,CAACM,GAAT,CAAaC,IAAb,CAAkBH,QAAlB;AACA,WAAOA,QAAP;AACD;;AAEDI,EAAAA,KAAK,CAACC,EAAD,EAAa;AAChBC,IAAAA,aAAa,CAACD,EAAD,CAAb;AACD;;AAED,SAAOE,QAAP,GAAkB;AAChB,SAAI,MAAMF,EAAV,IAAgBT,QAAQ,CAACM,GAAzB,EAA8B;AAC5BI,MAAAA,aAAa,CAACD,EAAD,CAAb;AACD;AACF;;AAjBY;;gBAATT,Q,SACqB,E;;AAmB3B,SAASA,QAAT,EAAmBN,MAAnB,EAA2BL,WAA3B","sourcesContent":["import moment from 'moment';\n\nimport config from '../config.json';\n\nclass Temperature {\n  KELVIN_NUM = config.KELVIN_NUM\n\n  kelvinToCelsius(temp: number) {\n    return parseFloat((temp - this.KELVIN_NUM).toFixed(0));\n  }\n}\n\nclass Moment {\n  getCorrectionSec(time: string): number {\n    return Math.round((parseInt(moment().format('x')) - parseInt(moment(time).format('x'))) / 1000);\n  }\n}\n\nclass Interval {\n  static ids: Array<any> = [];\n\n  set(callback: Function, ms: number): number {\n    const interval = setInterval(callback, ms);\n    Interval.ids.push(interval);\n    return interval;\n  }\n\n  clear(id: number) {\n    clearInterval(id);\n  }\n\n  static clearAll() {\n    for(const id of Interval.ids) {\n      clearInterval(id);\n    }\n  }\n}\n\nexport { Interval, Moment, Temperature };\n"]},"metadata":{},"sourceType":"module"}