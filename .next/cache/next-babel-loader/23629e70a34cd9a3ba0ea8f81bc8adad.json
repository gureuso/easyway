{"ast":null,"code":"var _dec, _class, _temp;\n\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport $ from 'jquery';\nimport { inject, observer } from 'mobx-react';\nimport Header from 'components/layout/header';\nimport Modal from 'components/modal';\nimport Title from 'components/pages/title';\nimport Logo from 'components/pages/logo';\nimport Tab from 'components/pages/tab';\nimport List from 'components/pages/list';\nimport Footer from 'components/pages/footer';\nimport HourlyWeather from 'components/pages/hourlyWeather';\nlet IndexPage = (_dec = inject('store'), _dec(_class = observer(_class = (_temp = class IndexPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      refresh: false\n    });\n  }\n\n  static getInitialProps(ctx) {\n    return {\n      token: ctx.query.token\n    };\n  }\n\n  changeTabMode() {\n    const height = $('#title').height() + $('#logo').height() + $('.tab').height();\n    $(window).scroll(() => {\n      const windowHeight = $(document).scrollTop();\n\n      if (windowHeight > height) {\n        $('.tab').removeClass('tab').addClass('mini-tab');\n        $('#list').css({\n          'margin-top': '290px'\n        });\n      } else {\n        $('.mini-tab').removeClass('mini-tab').addClass('tab');\n        $('#list').css({\n          'margin-top': '-50px'\n        });\n      }\n    });\n  }\n\n  refresh() {\n    this.setState({\n      refresh: true\n    });\n  }\n\n  componentDidMount() {\n    this.changeTabMode();\n  }\n\n  render() {\n    const token = this.props.token || this.props.store.token;\n\n    if (token) {\n      {\n        this.props.store.signin(token);\n      }\n    }\n\n    return __jsx(\"div\", null, __jsx(Header, {\n      title: \"EASYWAY\"\n    }), __jsx(Title, {\n      isSignin: this.props.store.isSignin\n    }), __jsx(Logo, null), __jsx(Tab, {\n      handler: this.refresh.bind(this)\n    }), __jsx(List, {\n      refresh: this.state.refresh,\n      token: token\n    }), __jsx(Footer, null), __jsx(Modal, null, __jsx(HourlyWeather, {\n      refresh: this.state.refresh\n    })));\n  }\n\n}, _temp)) || _class) || _class);\nexport default IndexPage;","map":null,"metadata":{},"sourceType":"module"}