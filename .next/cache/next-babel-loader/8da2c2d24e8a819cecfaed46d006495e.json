{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport xml from 'fast-xml-parser';\nimport config from 'config.json';\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\n\nclass BusUI {\n  static setWaitingTime(target, sec, stId, busRouteId, ord) {\n    const ui = new TimeUI();\n    ui.setWaitingTimeWithBus(target, sec, BusUI.setCurrentBus, stId, busRouteId, ord);\n  }\n\n  static setCurrentBus(target, stId, busRouteId, ord) {\n    const api = new BusAPI();\n    api.getDataByRoute(stId, busRouteId, ord).then(data => {\n      if (data) {\n        const bus = new Bus(data);\n        const waitingSec = bus.getWaitingSec();\n\n        if (waitingSec < 1) {\n          target.text(bus.message);\n        } else {\n          BusUI.setWaitingTime(target, waitingSec, stId, busRouteId, ord);\n        }\n      } else {\n        target.text('data is null');\n      }\n    });\n  }\n\n}\n\nclass BusAPI {\n  constructor() {\n    _defineProperty(this, \"API_KEY\", config.BUS_API_KEY);\n\n    _defineProperty(this, \"PROXY_HOST\", config.API_HOST);\n  }\n\n  proxy(url) {\n    return axios.get(this.PROXY_HOST + '/apis/proxy?url=' + encodeURIComponent(url)).then(response => {\n      const data = xml.parse(response.data.data.data).ServiceResult.msgBody;\n      return data ? data.itemList : undefined;\n    }).catch(error => {\n      console.log(error);\n      return undefined;\n    });\n  }\n\n  createBus(name, stationId, busRouteId, ord, token) {\n    const form = new FormData();\n    form.append('name', name);\n    form.append('station_id', stationId);\n    form.append('bus_route_id', busRouteId);\n    form.append('ord', ord);\n    form.append('token', token);\n    return axios.post(`${this.PROXY_HOST}/public_transport/buses/create`, form).then(response => {\n      return response.data.data;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteBus(id, token) {\n    return axios.delete(`${this.PROXY_HOST}/public_transport/buses/${id}/delete?token=${token}`).then(response => {\n      return response.data;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getBuses(token) {\n    return axios.get(`${this.PROXY_HOST}/public_transport/buses?token=${token}`).then(response => {\n      return response.data.data.buses;\n    }).catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getBusRoute(arsId) {\n    let url = 'http://ws.bus.go.kr/api/rest/stationinfo/getStationByUid?';\n    url += 'serviceKey=' + this.API_KEY;\n    url += '&arsId=' + arsId;\n    return this.proxy(url);\n  }\n\n  getBusStation(name) {\n    let url = 'http://ws.bus.go.kr/api/rest/stationinfo/getStationByName?';\n    url += 'serviceKey=' + this.API_KEY;\n    url += '&stSrch=' + name;\n    return this.proxy(url);\n  }\n\n  getDataByRoute(stId, busRouteId, ord) {\n    let url = 'http://ws.bus.go.kr/api/rest/arrive/getArrInfoByRoute?';\n    url += 'serviceKey=' + this.API_KEY;\n    url += '&stId=' + stId;\n    url += '&busRouteId=' + busRouteId;\n    url += '&ord=' + ord;\n    return this.proxy(url);\n  }\n\n}\n\nclass BusMessage {\n  constructor(message) {\n    _defineProperty(this, \"message\", void 0);\n\n    this.message = message;\n  }\n\n  getWaitingSec() {\n    const matchMinute = this.message.match(/\\d+분/g);\n    const minute = matchMinute ? parseInt(matchMinute[0].replace('분', '')) : 0;\n    const matchSec = this.message.match(/\\d+초/g);\n    const sec = matchSec ? parseInt(matchSec[0].replace('초', '')) : 0;\n    return minute * 60 + sec;\n  }\n\n  checkBusShutdown() {\n    if (this.message.search(/운행종료/g) != -1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n}\n\nclass Bus {\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"busNum\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    _defineProperty(this, \"apiCallTime\", void 0);\n\n    this.data = data;\n    this.busNum = parseInt(this.data.rtNm);\n    this.message = this.data.arrmsg1;\n    this.apiCallTime = this.data.mkTm;\n  }\n\n  getCorrectionSec() {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec() {\n    const bm = new BusMessage(this.message);\n    return bm.getWaitingSec() - this.getCorrectionSec();\n  }\n\n}\n\nexport { BusUI, BusAPI };","map":null,"metadata":{},"sourceType":"module"}