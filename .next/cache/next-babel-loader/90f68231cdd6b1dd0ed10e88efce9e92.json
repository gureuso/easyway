{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport axios from 'axios';\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nclass SubwayUI {\n  static setWaitingTime(target, sec) {\n    const ui = new TimeUI();\n    ui.setWaitingTime(target, sec, SubwayUI.setCurrentSubway);\n  }\n\n  static setCurrentSubway(target) {\n    const api = new SubwayAPI();\n    const res = api.getDaerimWithLine2();\n    res.then(data => {\n      if (data) {\n        const subway = new Subway(data);\n        const waitingSec = subway.getWaitingSec();\n\n        if (waitingSec < 1) {\n          target.text(subway.message);\n        } else {\n          SubwayUI.setWaitingTime(target, waitingSec);\n        }\n      } else {\n        target.text('data is null');\n      }\n    });\n  }\n\n}\n\nclass SubwayAPI {\n  constructor() {\n    _defineProperty(this, \"API_KEY\", config.SUBWAY_API_KEY);\n\n    _defineProperty(this, \"API_HOST\", config.API_HOST);\n  }\n\n  createBus(stationName, direction, trainLineName, ord, token) {\n    const form = new FormData();\n    form.append('station_name', stationName);\n    form.append('direction', direction);\n    form.append('train_line_name', trainLineName);\n    return axios.post(`${this.API_HOST}/public_transport/buses/create`, form).then(response => {\n      return response.data.data;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteBus(id, token) {\n    return axios.delete(`${this.API_HOST}/public_transport/buses/${id}/delete?token=${token}`).then(response => {\n      return response.data;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getBuses(token) {\n    return axios.get(`${this.API_HOST}/public_transport/buses?token=${token}`).then(response => {\n      return response.data.data.buses;\n    }).catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getCurrentSubway(station = '대림') {\n    const url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + station;\n    return axios.get(url).then(response => {\n      return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n    }).catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getDaerimWithLine2() {\n    return this.getCurrentSubway().then(list => {\n      let result = undefined;\n\n      for (const data of list) {\n        if (data.updnLine = '외선') {\n          if (!result) {\n            result = data;\n          } else {\n            if (data.updnLine < result.updnLine) {\n              result = data;\n            }\n          }\n        }\n      }\n\n      return result;\n    });\n  }\n\n}\n\nclass Subway {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"apiCallTime\", void 0);\n\n    _defineProperty(this, \"waitingSec\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = _parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  getCorrectionSec() {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec() {\n    return this.waitingSec - this.getCorrectionSec();\n  }\n\n}\n\nexport { SubwayUI, SubwayAPI };","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/lib/subway.tsx"],"names":["axios","Moment","TimeUI","config","SubwayUI","setWaitingTime","target","sec","ui","setCurrentSubway","api","SubwayAPI","res","getDaerimWithLine2","then","data","subway","Subway","waitingSec","getWaitingSec","text","message","SUBWAY_API_KEY","API_HOST","createBus","stationName","direction","trainLineName","ord","token","form","FormData","append","post","response","catch","error","console","log","deleteBus","id","delete","getBuses","get","buses","getCurrentSubway","station","url","API_KEY","realtimeArrivalList","list","result","undefined","updnLine","constructor","apiCallTime","recptnDt","barvlDt","arvlMsg2","getCorrectionSec","m"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nclass SubwayUI {\n  static setWaitingTime(target: JQuery<HTMLElement>, sec: number) {\n    const ui = new TimeUI();\n    ui.setWaitingTime(target, sec, SubwayUI.setCurrentSubway);\n  }\n\n  static setCurrentSubway(target: JQuery<HTMLElement>) {\n    const api = new SubwayAPI();\n    const res = api.getDaerimWithLine2();\n    res.then(data => {\n      if(data) {\n        const subway = new Subway(data);\n        const waitingSec = subway.getWaitingSec();\n        if(waitingSec < 1) {\n          target.text(subway.message);\n        } else {\n          SubwayUI.setWaitingTime(target, waitingSec);\n        }\n      } else {\n        target.text('data is null');\n      }  \n    });\n  }\n}\n\nclass SubwayAPI {\n  API_KEY: string = config.SUBWAY_API_KEY;\n  API_HOST: string = config.API_HOST;\n\n  createBus(stationName: string, direction: string, trainLineName: string, ord: string, token: string) {\n    const form = new FormData();\n    form.append('station_name', stationName);\n    form.append('direction', direction);\n    form.append('train_line_name', trainLineName);\n\n    return axios.post(`${this.API_HOST}/public_transport/buses/create`, form)\n    .then(response => {\n      return response.data.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteBus(id: number, token: string) {\n    return axios.delete(`${this.API_HOST}/public_transport/buses/${id}/delete?token=${token}`)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getBuses(token: string) {\n    return axios.get(`${this.API_HOST}/public_transport/buses?token=${token}`)\n    .then(response => {\n      return response.data.data.buses;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getCurrentSubway(station='대림') {\n    const url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + station;\n    return axios.get(url)\n    .then(response => {\n      return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getDaerimWithLine2() {\n    return this.getCurrentSubway().then(list => {\n      let result = undefined;\n      for(const data of list) {\n        if(data.updnLine = '외선') {\n          if(!result) {\n            result = data;\n          } else {\n            if(data.updnLine < result.updnLine) {\n              result = data;\n            }\n          }\n        }\n      }\n      return result;\n    });\n  }\n}\n\nclass Subway {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  data: {[key: string]: any};\n  apiCallTime: string;\n  waitingSec: number;\n  message: string;\n\n  constructor(data: {[key: string]: any}) {\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  private getCorrectionSec(): number {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec(): number {\n    return this.waitingSec - this.getCorrectionSec();\n  }\n}\n\nexport { SubwayUI, SubwayAPI };\n"]},"metadata":{},"sourceType":"module"}