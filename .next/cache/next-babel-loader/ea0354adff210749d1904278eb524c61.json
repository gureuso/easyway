{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from 'axios';\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nvar SubwayUI = /*#__PURE__*/function () {\n  function SubwayUI() {\n    _classCallCheck(this, SubwayUI);\n  }\n\n  _createClass(SubwayUI, null, [{\n    key: \"setWaitingTime\",\n    value: function setWaitingTime(target, sec, stationName, trainLineName) {\n      var ui = new TimeUI();\n      ui.setWaitingTimeWithSubway(target, sec, SubwayUI.setCurrentSubway, stationName, trainLineName);\n    }\n  }, {\n    key: \"setCurrentSubway\",\n    value: function setCurrentSubway(target, stationName, trainLineName) {\n      var api = new SubwayAPI();\n      api.getCurrentSubway(stationName).then(function (data) {\n        var _iterator = _createForOfIteratorHelper(data),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var d = _step.value;\n\n            if (d.trainLineNm == trainLineName) {\n              var subway = new Subway(d);\n              var waitingSec = subway.getWaitingSec();\n\n              if (waitingSec < 1) {\n                target.text(subway.message);\n              } else {\n                SubwayUI.setWaitingTime(target, waitingSec, stationName, trainLineName);\n              }\n\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    }\n  }]);\n\n  return SubwayUI;\n}();\n\nvar SubwayAPI = /*#__PURE__*/function () {\n  function SubwayAPI() {\n    _classCallCheck(this, SubwayAPI);\n\n    _defineProperty(this, \"API_KEY\", config.SUBWAY_API_KEY);\n\n    _defineProperty(this, \"API_HOST\", config.API_HOST);\n  }\n\n  _createClass(SubwayAPI, [{\n    key: \"createSubway\",\n    value: function createSubway(stationName, direction, trainLineName, token) {\n      var form = new FormData();\n      form.append('station_name', stationName);\n      form.append('direction', direction);\n      form.append('train_line_name', trainLineName);\n      form.append('token', token);\n      return axios.post(\"\".concat(this.API_HOST, \"/public_transport/subways/create\"), form).then(function (response) {\n        return response.data.data;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return {};\n      });\n    }\n  }, {\n    key: \"deleteSubway\",\n    value: function deleteSubway(id, token) {\n      return axios[\"delete\"](\"\".concat(this.API_HOST, \"/public_transport/subways/\").concat(id, \"/delete?token=\").concat(token)).then(function (response) {\n        return response.data;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return {};\n      });\n    }\n  }, {\n    key: \"getSubways\",\n    value: function getSubways(token) {\n      return axios.get(\"\".concat(this.API_HOST, \"/public_transport/subways?token=\").concat(token)).then(function (response) {\n        return response.data.data.subways;\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return [];\n      });\n    }\n  }, {\n    key: \"getCurrentSubway\",\n    value: function getCurrentSubway(stationName) {\n      var url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + stationName;\n      return axios.get(url).then(function (response) {\n        return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n      })[\"catch\"](function (error) {\n        console.log(error);\n        return [];\n      });\n    }\n  }]);\n\n  return SubwayAPI;\n}();\n\nvar Subway = /*#__PURE__*/function () {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  function Subway(data) {\n    _classCallCheck(this, Subway);\n\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"apiCallTime\", void 0);\n\n    _defineProperty(this, \"waitingSec\", void 0);\n\n    _defineProperty(this, \"message\", void 0);\n\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  _createClass(Subway, [{\n    key: \"getCorrectionSec\",\n    value: function getCorrectionSec() {\n      var m = new Moment();\n      return m.getCorrectionSec(this.apiCallTime);\n    }\n  }, {\n    key: \"getWaitingSec\",\n    value: function getWaitingSec() {\n      return this.waitingSec - this.getCorrectionSec();\n    }\n  }]);\n\n  return Subway;\n}();\n\nexport { SubwayUI, SubwayAPI };","map":{"version":3,"sources":["/Users/yjh/Documents/React/easyway/lib/subway.tsx"],"names":["axios","Moment","TimeUI","config","SubwayUI","target","sec","stationName","trainLineName","ui","setWaitingTimeWithSubway","setCurrentSubway","api","SubwayAPI","getCurrentSubway","then","data","d","trainLineNm","subway","Subway","waitingSec","getWaitingSec","text","message","setWaitingTime","SUBWAY_API_KEY","API_HOST","direction","token","form","FormData","append","post","response","error","console","log","id","get","subways","url","API_KEY","realtimeArrivalList","apiCallTime","recptnDt","parseInt","barvlDt","arvlMsg2","m","getCorrectionSec"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { Moment } from './common';\nimport { TimeUI } from './ui';\nimport config from 'config.json';\n\nclass SubwayUI {\n  static setWaitingTime(target: JQuery<HTMLElement>, sec: number, stationName: string, trainLineName: string) {\n    const ui = new TimeUI();\n    ui.setWaitingTimeWithSubway(target, sec, SubwayUI.setCurrentSubway, stationName, trainLineName);\n  }\n\n  static setCurrentSubway(target: JQuery<HTMLElement>, stationName: string, trainLineName: string) {\n    const api = new SubwayAPI();\n    api.getCurrentSubway(stationName).then(data => {\n      for(let d of data) {\n        if(d.trainLineNm == trainLineName) {\n          const subway = new Subway(d);\n          const waitingSec = subway.getWaitingSec();\n          if(waitingSec < 1) {\n            target.text(subway.message);\n          } else {\n            SubwayUI.setWaitingTime(target, waitingSec, stationName, trainLineName);\n          }\n          break;\n        }\n      }\n    });\n  }\n}\n\nclass SubwayAPI {\n  API_KEY: string = config.SUBWAY_API_KEY;\n  API_HOST: string = config.API_HOST;\n\n  createSubway(stationName: string, direction: string, trainLineName: string, token: string) {\n    const form = new FormData();\n    form.append('station_name', stationName);\n    form.append('direction', direction);\n    form.append('train_line_name', trainLineName);\n    form.append('token', token);\n\n    return axios.post(`${this.API_HOST}/public_transport/subways/create`, form)\n    .then(response => {\n      return response.data.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  deleteSubway(id: number, token: string) {\n    return axios.delete(`${this.API_HOST}/public_transport/subways/${id}/delete?token=${token}`)\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => {\n      console.log(error);\n      return {};\n    });\n  }\n\n  getSubways(token: string) {\n    return axios.get(`${this.API_HOST}/public_transport/subways?token=${token}`)\n    .then(response => {\n      return response.data.data.subways;\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getCurrentSubway(stationName: string) {\n    const url = 'http://swopenAPI.seoul.go.kr/api/subway/' + this.API_KEY + '/json/realtimeStationArrival/0/100/' + stationName;\n    return axios.get(url)\n    .then(response => {\n      return response.data.realtimeArrivalList ? response.data.realtimeArrivalList : [];\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n}\n\nclass Subway {\n  /*\n    updnLine '외선'\n    barvlDt\u001e 도착예정시간\n    recptnDt 생성시각\n    arvlCd 도착코드\n  */\n  data: {[key: string]: any};\n  apiCallTime: string;\n  waitingSec: number;\n  message: string;\n\n  constructor(data: {[key: string]: any}) {\n    this.data = data;\n    this.apiCallTime = this.data.recptnDt;\n    this.waitingSec = parseInt(this.data.barvlDt);\n    this.message = this.data.arvlMsg2;\n  }\n\n  private getCorrectionSec(): number {\n    const m = new Moment();\n    return m.getCorrectionSec(this.apiCallTime);\n  }\n\n  getWaitingSec(): number {\n    return this.waitingSec - this.getCorrectionSec();\n  }\n}\n\nexport { SubwayUI, SubwayAPI };\n"]},"metadata":{},"sourceType":"module"}