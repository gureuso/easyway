{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport config from 'config.json';\n\nclass Random {\n  static all(len) {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    return this.random(characters, len);\n  }\n\n  static num(len) {\n    const characters = '0123456789';\n    return this.random(characters, len);\n  }\n\n  static str(len) {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n    return this.random(characters, len);\n  }\n\n  static random(characters, len) {\n    let result = '';\n    const charactersLength = characters.length;\n\n    for (let i = 0; i < len; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n\n}\n\nclass Temperature {\n  constructor() {\n    _defineProperty(this, \"KELVIN_NUM\", config.KELVIN_NUM);\n  }\n\n  kelvinToCelsius(temp) {\n    return parseFloat((temp - this.KELVIN_NUM).toFixed(0));\n  }\n\n}\n\nclass Moment {\n  getCorrectionSec(time) {\n    return Math.round((parseInt(moment().format('x')) - parseInt(moment(time).format('x'))) / 1000);\n  }\n\n}\n\nclass Interval {\n  set(callback, ms) {\n    const interval = setInterval(callback, ms);\n    Interval.ids.push(interval);\n    return interval;\n  }\n\n  clear(id) {\n    clearInterval(id);\n  }\n\n  static clearAll() {\n    for (const id of Interval.ids) {\n      clearInterval(id);\n    }\n  }\n\n}\n\n_defineProperty(Interval, \"ids\", []);\n\nexport { Interval, Moment, Temperature, Random };","map":null,"metadata":{},"sourceType":"module"}